{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8828404,"sourceType":"datasetVersion","datasetId":5311645}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-22T01:28:34.054946Z","iopub.execute_input":"2024-07-22T01:28:34.055506Z","iopub.status.idle":"2024-07-22T01:28:34.064760Z","shell.execute_reply.started":"2024-07-22T01:28:34.055444Z","shell.execute_reply":"2024-07-22T01:28:34.063527Z"},"trusted":true},"execution_count":123,"outputs":[{"name":"stdout","text":"/kaggle/input/e-xlr/E-xLR DATA - Sheet1.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression,SGDRegressor\nfrom sklearn.preprocessing import PolynomialFeatures,StandardScaler\nfrom sklearn.metrics import r2_score\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.preprocessing import FunctionTransformer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import PowerTransformer\n%matplotlib inline","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:34.067273Z","iopub.execute_input":"2024-07-22T01:28:34.067718Z","iopub.status.idle":"2024-07-22T01:28:34.083560Z","shell.execute_reply.started":"2024-07-22T01:28:34.067677Z","shell.execute_reply":"2024-07-22T01:28:34.082223Z"},"trusted":true},"execution_count":124,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/e-xlr/E-xLR DATA - Sheet1.csv')\n#df= pd.read_csv(\"/kaggle/input/e-xlr/E-xLR DATA - Sheet1.csv\")\n#df = pd.read_csv('/kaggle/input/toughness/TOUGHNESS DATA - Sheet1.csv')\n#df = pd.read_csv('/kaggle/input/m-m-ftir/M_M (FTIR) DATA - Sheet1.csv')\n#df = pd.read_csv('/kaggle/input/bv-tv/BV_TV DATA - Sheet1.csv')","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:34.084957Z","iopub.execute_input":"2024-07-22T01:28:34.085428Z","iopub.status.idle":"2024-07-22T01:28:34.106142Z","shell.execute_reply.started":"2024-07-22T01:28:34.085384Z","shell.execute_reply":"2024-07-22T01:28:34.105000Z"},"trusted":true},"execution_count":125,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:34.109022Z","iopub.execute_input":"2024-07-22T01:28:34.109451Z","iopub.status.idle":"2024-07-22T01:28:34.127095Z","shell.execute_reply.started":"2024-07-22T01:28:34.109408Z","shell.execute_reply":"2024-07-22T01:28:34.126035Z"},"trusted":true},"execution_count":126,"outputs":[{"execution_count":126,"output_type":"execute_result","data":{"text/plain":"   HbA1c  E-xLR\n0    4.2   8.40\n1    4.3   3.23\n2    4.6   2.90\n3    4.6   3.23\n4    4.7   6.90","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>HbA1c</th>\n      <th>E-xLR</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>4.2</td>\n      <td>8.40</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4.3</td>\n      <td>3.23</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4.6</td>\n      <td>2.90</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4.6</td>\n      <td>3.23</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4.7</td>\n      <td>6.90</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"### scatter plot\nplt.scatter(df['HbA1c'],df['E-xLR'])\nplt.xlabel(\"HbA1c\")\nplt.ylabel(\"E-xLR\")","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:34.128500Z","iopub.execute_input":"2024-07-22T01:28:34.128861Z","iopub.status.idle":"2024-07-22T01:28:34.379233Z","shell.execute_reply.started":"2024-07-22T01:28:34.128830Z","shell.execute_reply":"2024-07-22T01:28:34.377961Z"},"trusted":true},"execution_count":127,"outputs":[{"execution_count":127,"output_type":"execute_result","data":{"text/plain":"Text(0, 0.5, 'E-xLR')"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"### Correlation\ndf.corr()","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:34.380866Z","iopub.execute_input":"2024-07-22T01:28:34.381311Z","iopub.status.idle":"2024-07-22T01:28:34.393028Z","shell.execute_reply.started":"2024-07-22T01:28:34.381270Z","shell.execute_reply":"2024-07-22T01:28:34.391770Z"},"trusted":true},"execution_count":128,"outputs":[{"execution_count":128,"output_type":"execute_result","data":{"text/plain":"          HbA1c     E-xLR\nHbA1c  1.000000 -0.293784\nE-xLR -0.293784  1.000000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>HbA1c</th>\n      <th>E-xLR</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>HbA1c</th>\n      <td>1.000000</td>\n      <td>-0.293784</td>\n    </tr>\n    <tr>\n      <th>E-xLR</th>\n      <td>-0.293784</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"### Seaborn for visualizations\nimport seaborn as sns\nsns.pairplot(df)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:34.394521Z","iopub.execute_input":"2024-07-22T01:28:34.394856Z","iopub.status.idle":"2024-07-22T01:28:35.957371Z","shell.execute_reply.started":"2024-07-22T01:28:34.394827Z","shell.execute_reply":"2024-07-22T01:28:35.956150Z"},"trusted":true},"execution_count":129,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"execution_count":129,"output_type":"execute_result","data":{"text/plain":"<seaborn.axisgrid.PairGrid at 0x7c134792a080>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 500x500 with 6 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"### Independent and Dependent features\nX= df[['HbA1c']] ### Independent feaure should be data frame or 2D array.\ny=df['E-xLR'] ### This variable can be serier or 1D array","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:35.959029Z","iopub.execute_input":"2024-07-22T01:28:35.959914Z","iopub.status.idle":"2024-07-22T01:28:35.966341Z","shell.execute_reply.started":"2024-07-22T01:28:35.959877Z","shell.execute_reply":"2024-07-22T01:28:35.965131Z"},"trusted":true},"execution_count":130,"outputs":[]},{"cell_type":"code","source":"### Train Test Split\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test= train_test_split(X,y,test_size=0.20,random_state=46)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:35.971847Z","iopub.execute_input":"2024-07-22T01:28:35.972604Z","iopub.status.idle":"2024-07-22T01:28:35.983702Z","shell.execute_reply.started":"2024-07-22T01:28:35.972566Z","shell.execute_reply":"2024-07-22T01:28:35.982517Z"},"trusted":true},"execution_count":131,"outputs":[]},{"cell_type":"markdown","source":"# Standardization","metadata":{}},{"cell_type":"code","source":"### Standardization\n#from sklearn.preprocessing import StandardScaler\n#scaler=StandardScaler()\n#X_train=scaler.fit_transform(X_train)\n#X_test","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:35.985351Z","iopub.execute_input":"2024-07-22T01:28:35.985791Z","iopub.status.idle":"2024-07-22T01:28:35.996694Z","shell.execute_reply.started":"2024-07-22T01:28:35.985750Z","shell.execute_reply":"2024-07-22T01:28:35.994952Z"},"trusted":true},"execution_count":132,"outputs":[]},{"cell_type":"markdown","source":"# PDF and Q-Q plot","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize=(14,4))\nplt.subplot(121)\nsns.distplot(X_train['HbA1c'])\nplt.title('HbA1c PDF')\n\nplt.subplot(122)\nstats.probplot(X_train['HbA1c'], dist=\"norm\", plot=plt)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:35.998586Z","iopub.execute_input":"2024-07-22T01:28:35.999111Z","iopub.status.idle":"2024-07-22T01:28:36.696212Z","shell.execute_reply.started":"2024-07-22T01:28:35.999067Z","shell.execute_reply":"2024-07-22T01:28:36.694836Z"},"trusted":true},"execution_count":133,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_32/2329309956.py:3: UserWarning: \n\n`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n\nPlease adapt your code to use either `displot` (a figure-level function with\nsimilar flexibility) or `histplot` (an axes-level function for histograms).\n\nFor a guide to updating your code to use the new functions, please see\nhttps://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n\n  sns.distplot(X_train['HbA1c'])\n/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"execution_count":133,"output_type":"execute_result","data":{"text/plain":"((array([-2.28017173, -1.92017484, -1.7091256 , -1.55469152, -1.43036801,\n         -1.3249031 , -1.23241216, -1.14940983, -1.07365152, -1.00360143,\n         -0.93815914, -0.87650695, -0.81801894, -0.76220403, -0.70866868,\n         -0.65709167, -0.60720655, -0.55878903, -0.51164772, -0.46561731,\n         -0.42055328, -0.37632784, -0.33282677, -0.28994682, -0.24759369,\n         -0.20568029, -0.16412527, -0.12285188, -0.08178679, -0.04085922,\n          0.        ,  0.04085922,  0.08178679,  0.12285188,  0.16412527,\n          0.20568029,  0.24759369,  0.28994682,  0.33282677,  0.37632784,\n          0.42055328,  0.46561731,  0.51164772,  0.55878903,  0.60720655,\n          0.65709167,  0.70866868,  0.76220403,  0.81801894,  0.87650695,\n          0.93815914,  1.00360143,  1.07365152,  1.14940983,  1.23241216,\n          1.3249031 ,  1.43036801,  1.55469152,  1.7091256 ,  1.92017484,\n          2.28017173]),\n  array([ 4.2 ,  4.3 ,  4.6 ,  4.6 ,  4.7 ,  4.8 ,  4.8 ,  4.8 ,  4.8 ,\n          4.92,  5.1 ,  5.1 ,  5.1 ,  5.1 ,  5.24,  5.3 ,  5.3 ,  5.4 ,\n          5.4 ,  5.4 ,  5.4 ,  5.4 ,  5.5 ,  5.5 ,  5.6 ,  5.6 ,  5.7 ,\n          5.7 ,  5.7 ,  5.8 ,  5.8 ,  5.8 ,  5.8 ,  6.1 ,  6.1 ,  6.2 ,\n          6.3 ,  6.5 ,  6.5 ,  6.6 ,  6.8 ,  6.8 ,  6.8 ,  6.8 ,  6.8 ,\n          6.9 ,  6.9 ,  6.9 ,  7.  ,  7.1 ,  7.1 ,  7.1 ,  7.2 ,  7.3 ,\n          7.6 ,  8.1 ,  8.4 ,  8.6 ,  9.7 , 10.2 , 10.3 ])),\n (1.304760990645951, 6.179672131147541, 0.9498390925953718))"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1400x400 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# Simple Linear Regression with Hyper parameters","metadata":{}},{"cell_type":"code","source":"### Apply Simple Linear Regression\nfrom sklearn.linear_model import LinearRegression\nregression=LinearRegression()\nregression.fit(X_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:36.698034Z","iopub.execute_input":"2024-07-22T01:28:36.698506Z","iopub.status.idle":"2024-07-22T01:28:36.712035Z","shell.execute_reply.started":"2024-07-22T01:28:36.698464Z","shell.execute_reply":"2024-07-22T01:28:36.710660Z"},"trusted":true},"execution_count":134,"outputs":[{"execution_count":134,"output_type":"execute_result","data":{"text/plain":"LinearRegression()","text/html":"<style>#sk-container-id-7 {color: black;background-color: white;}#sk-container-id-7 pre{padding: 0;}#sk-container-id-7 div.sk-toggleable {background-color: white;}#sk-container-id-7 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-7 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-7 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-7 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-7 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-7 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-7 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-7 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-7 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-7 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-7 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-7 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-7 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-7 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-7 div.sk-item {position: relative;z-index: 1;}#sk-container-id-7 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-7 div.sk-item::before, #sk-container-id-7 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-7 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-7 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-7 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-7 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-7 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-7 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-7 div.sk-label-container {text-align: center;}#sk-container-id-7 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-7 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-7\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" checked><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"print(\"Coefficient or slope:\",regression.coef_)\nprint(\"Intercept:\",regression.intercept_)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:36.713939Z","iopub.execute_input":"2024-07-22T01:28:36.714483Z","iopub.status.idle":"2024-07-22T01:28:36.730788Z","shell.execute_reply.started":"2024-07-22T01:28:36.714429Z","shell.execute_reply":"2024-07-22T01:28:36.729588Z"},"trusted":true},"execution_count":135,"outputs":[{"name":"stdout","text":"Coefficient or slope: [-0.57357775]\nIntercept: 6.7274732640468855\n","output_type":"stream"}]},{"cell_type":"code","source":"### Plot training data plot best fit line\nplt.scatter(X_train,y_train)\nplt.plot(X_train,regression.predict(X_train))\n\nplt.xlabel('HbA1c')\nplt.ylabel('E-xLR')","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:36.732526Z","iopub.execute_input":"2024-07-22T01:28:36.732986Z","iopub.status.idle":"2024-07-22T01:28:37.046910Z","shell.execute_reply.started":"2024-07-22T01:28:36.732933Z","shell.execute_reply":"2024-07-22T01:28:37.045534Z"},"trusted":true},"execution_count":136,"outputs":[{"execution_count":136,"output_type":"execute_result","data":{"text/plain":"Text(0, 0.5, 'E-xLR')"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"### Plot training data plot best fit line\nplt.scatter(X_test,y_test)\nplt.plot(X_test,regression.predict(X_test))\nplt.xlabel('HbA1c')\nplt.ylabel('E-xLR')","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:37.048527Z","iopub.execute_input":"2024-07-22T01:28:37.048898Z","iopub.status.idle":"2024-07-22T01:28:37.299674Z","shell.execute_reply.started":"2024-07-22T01:28:37.048865Z","shell.execute_reply":"2024-07-22T01:28:37.298400Z"},"trusted":true},"execution_count":137,"outputs":[{"execution_count":137,"output_type":"execute_result","data":{"text/plain":"Text(0, 0.5, 'E-xLR')"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# Metrics before Guassian Transformation","metadata":{}},{"cell_type":"code","source":"### Prediction of test data\n###1. prediction E-xLR output = intercept + coef_(HbA1c)\n###2. y_pred_test = 20.76923076923077 + -1.23094616 (X_test)\n### Prediction for the test data\ny_pred=regression.predict(X_test)\ny_train_pred=regression.predict(X_train)\n\n### Performance metrics\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\n\n#Training error\nmse=mean_squared_error(y_train, y_train_pred)\nmae=mean_absolute_error(y_train,y_train_pred)\nrmse=np.sqrt(mse)\nprint('mse_train',mse)\nprint('mae_train',mae)\nprint('rmse_train',rmse)\n\n###R square Formula\n# R^2 = 1- ssr /sst\n# R^2 = coefficient of determination SSR = sum of squares of residuals SST = total sum of squares\nfrom sklearn.metrics import r2_score\nscore=r2_score(y_train,y_train_pred)\nprint('r2_score_train',score)\n\n#Testing error\nmse=mean_squared_error(y_test, y_pred)\nmae=mean_absolute_error(y_test,y_pred)\nrmse=np.sqrt(mse)\nprint('mse_test',mse)\nprint('mae_test',mae)\nprint('rmse_test',rmse)\n\n###R square Formula\n# R^2 = 1- ssr /sst\n# R^2 = coefficient of determination SSR = sum of squares of residuals SST = total sum of squares\nfrom sklearn.metrics import r2_score\nscore=r2_score(y_test,y_pred)\nprint('r2_score_test',score)\n\n### Adjusted R^2 = 1-[(1-R^2)*(n-1)/(n-k-1)]\n# where  R^2:The R^2 of model n: The number of observations  k: the number of predictor variables\n### Display adjusted R- squared\n1-(1-score)*(len(y_test)-1)/(len(y_test)-X_test.shape[1]-1)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:37.301137Z","iopub.execute_input":"2024-07-22T01:28:37.301507Z","iopub.status.idle":"2024-07-22T01:28:37.326547Z","shell.execute_reply.started":"2024-07-22T01:28:37.301475Z","shell.execute_reply":"2024-07-22T01:28:37.325138Z"},"trusted":true},"execution_count":138,"outputs":[{"name":"stdout","text":"mse_train 4.072583095514728\nmae_train 1.4444867215908683\nrmse_train 2.018064195092596\nr2_score_train 0.12538582758397354\nmse_test 3.3257470704153844\nmae_test 1.5077101530573955\nrmse_test 1.8236630912576435\nr2_score_test -0.2778034672239267\n","output_type":"stream"},{"execution_count":138,"output_type":"execute_result","data":{"text/plain":"-0.3690751434542072"},"metadata":{}}]},{"cell_type":"markdown","source":"# Transform Applying","metadata":{}},{"cell_type":"code","source":"'''# Custom function for reciprocal transformation\ndef reciprocal_transform(x):\n    return 1 / x\n\n# Create the transformer\ntrf = FunctionTransformer(func=reciprocal_transform)'''\n\n\n#Exponetial Transform\n#trf= FunctionTransformer(func=np.exp)  \n\n#Squareroot Transform\n#trf= FunctionTransformer(func=np.sqrt)  \n\n\n#Box-Cox Transform\ntrf = PowerTransformer(method='box-cox')\n\n\n#Log transform\n#trf= FunctionTransformer(func=np.log1p)  \nX_train_log_transformed= trf.fit_transform(X_train)\nX_test_log_transformed= trf.transform(X_test) \n\n#Box-Cox Transform\npd.DataFrame({'cols':X_train.columns,'box_cox_lambdas':trf.lambdas_})","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:37.327940Z","iopub.execute_input":"2024-07-22T01:28:37.328333Z","iopub.status.idle":"2024-07-22T01:28:37.356316Z","shell.execute_reply.started":"2024-07-22T01:28:37.328299Z","shell.execute_reply":"2024-07-22T01:28:37.355101Z"},"trusted":true},"execution_count":139,"outputs":[{"execution_count":139,"output_type":"execute_result","data":{"text/plain":"    cols  box_cox_lambdas\n0  HbA1c        -1.214446","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cols</th>\n      <th>box_cox_lambdas</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>HbA1c</td>\n      <td>-1.214446</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# Metrics After Transform ","metadata":{}},{"cell_type":"code","source":"regression=LinearRegression(n_jobs=-1)\nregression.fit(X_train_log_transformed,y_train)\ny_train_pred=regression.predict(X_train_log_transformed)\ny_pred=regression.predict(X_test_log_transformed)\n\n### Performance metrics\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\n\n#Training errors\nmse=mean_squared_error(y_train, y_train_pred)\nmae=mean_absolute_error(y_train,y_train_pred)\nrmse=np.sqrt(mse)\nprint('mse train',mse)\nprint('mae train',mae)\nprint('rmse train',rmse)\n\n###R square Formula\n# R^2 = 1- ssr /sst\n# R^2 = coefficient of determination SSR = sum of squares of residuals SST = total sum of squares\nfrom sklearn.metrics import r2_score\nscore=r2_score(y_train,y_train_pred)\nprint('r2_score train',score)\n\n#Testing errors\nmse=mean_squared_error(y_test, y_pred)\nmae=mean_absolute_error(y_test,y_pred)\nrmse=np.sqrt(mse)\nprint('mse test',mse)\nprint('mae test',mae)\nprint('rmse test',rmse)\n\n###R square Formula\n# R^2 = 1- ssr /sst\n# R^2 = coefficient of determination SSR = sum of squares of residuals SST = total sum of squares\nfrom sklearn.metrics import r2_score\nscore=r2_score(y_test,y_pred)\nprint('r2_score test',score)\n\n### Adjusted R^2 = 1-[(1-R^2)*(n-1)/(n-k-1)]\n# where  R^2:The R^2 of model n: The number of observations  k: the number of predictor variables\n### Display adjusted R- squared\n1-(1-score)*(len(y_test)-1)/(len(y_test)-X_test.shape[1]-1)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:37.357787Z","iopub.execute_input":"2024-07-22T01:28:37.358200Z","iopub.status.idle":"2024-07-22T01:28:37.384366Z","shell.execute_reply.started":"2024-07-22T01:28:37.358167Z","shell.execute_reply":"2024-07-22T01:28:37.383241Z"},"trusted":true},"execution_count":140,"outputs":[{"name":"stdout","text":"mse train 3.9265340123515395\nmae train 1.4354121571205432\nrmse train 1.9815483875877318\nr2_score train 0.1567508347568345\nmse test 3.567047014959574\nmae test 1.5278969564082878\nrmse test 1.8886627583980085\nr2_score test -0.37051463835366505\n","output_type":"stream"},{"execution_count":140,"output_type":"execute_result","data":{"text/plain":"-0.4684085410932126"},"metadata":{}}]},{"cell_type":"code","source":"import seaborn as sns\nsns.displot(y_pred-y_test,kind='kde')","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:37.385810Z","iopub.execute_input":"2024-07-22T01:28:37.386221Z","iopub.status.idle":"2024-07-22T01:28:37.874489Z","shell.execute_reply.started":"2024-07-22T01:28:37.386177Z","shell.execute_reply":"2024-07-22T01:28:37.873450Z"},"trusted":true},"execution_count":141,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"execution_count":141,"output_type":"execute_result","data":{"text/plain":"<seaborn.axisgrid.FacetGrid at 0x7c1347413d90>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 500x500 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# Crossvalidation to check ","metadata":{}},{"cell_type":"code","source":"X_transformed= trf.fit_transform(X)\nregression=LinearRegression(n_jobs=-1)\nprint('r2_score=',-(np.mean(cross_val_score(regression,X_transformed,y,scoring='r2',cv=3))))\n\nprint('Mean squared error',np.mean(cross_val_score(regression,X_transformed,y,scoring='neg_mean_squared_error',cv=5)))\n# Perform cross-validation\nscores = cross_validate(regression, X_transformed, y, cv=5, scoring='neg_mean_squared_error')\n\n# Print the mean squared error (negative because Scikit-Learn uses negated values)\nprint(f\"Mean squared error: {-scores['test_score'].mean():.4f}\")","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:37.876130Z","iopub.execute_input":"2024-07-22T01:28:37.876911Z","iopub.status.idle":"2024-07-22T01:28:37.923449Z","shell.execute_reply.started":"2024-07-22T01:28:37.876868Z","shell.execute_reply":"2024-07-22T01:28:37.922118Z"},"trusted":true},"execution_count":142,"outputs":[{"name":"stdout","text":"r2_score= 0.10229975201978814\nMean squared error -3.8625504512331252\nMean squared error: 3.8626\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Random state values","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\n\n# Function to evaluate model performance\ndef evaluate_model(random_state):\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=random_state)\n    \n    # Applying Linear Regression\n    regression=LinearRegression(n_jobs=-1)\n    regression.fit(X_train_log_transformed,y_train)\n    y_train_pred=regression.predict(X_train_log_transformed)\n    y_pred=regression.predict(X_test_log_transformed)\n    \n    mse_train=mean_squared_error(y_train, y_train_pred)\n    mse_test=mean_squared_error(y_test, y_pred)\n    r2_train=r2_score(y_train,y_train_pred)\n    r2_test=r2_score(y_test,y_pred)\n    \n    return random_state, mse_train, mse_test, r2_train, r2_test\n\n# Iterate over different random_state values\nresults = []\nfor random_state in range(200):\n    results.append(evaluate_model(random_state))\n\n# Convert results to DataFrame\nresults_df = pd.DataFrame(results, columns=['random_state', 'mse_train', 'mse_test', 'r2_train', 'r2_test'])\n\n# Find the best random_state values based on Test MSE\nbest_random_states = results_df.nsmallest(50, 'mse_test')\n\n# Print the training and testing MSE with respect to the best random_state values\nprint(\"Best random_state values based on Test MSE:\")\nfor index, row in best_random_states.iterrows():\n    print(f\"Random State: {row['random_state']}\")\n    print(f\"Training MSE: {row['mse_train']:.4f}, Testing MSE: {row['mse_test']:.4f}\")\n    print(f\"Training R2: {row['r2_train']:.4f}, Testing R2: {row['r2_test']:.4f}\")\n    print(\"---\")","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:37.924918Z","iopub.execute_input":"2024-07-22T01:28:37.925767Z","iopub.status.idle":"2024-07-22T01:28:38.706429Z","shell.execute_reply.started":"2024-07-22T01:28:37.925734Z","shell.execute_reply":"2024-07-22T01:28:38.704989Z"},"trusted":true},"execution_count":143,"outputs":[{"name":"stdout","text":"Best random_state values based on Test MSE:\nRandom State: 82.0\nTraining MSE: 5.0886, Testing MSE: 1.1343\nTraining R2: 0.0002, Testing R2: -0.0588\n---\nRandom State: 91.0\nTraining MSE: 5.0963, Testing MSE: 1.2135\nTraining R2: 0.0021, Testing R2: -2.7940\n---\nRandom State: 119.0\nTraining MSE: 4.9357, Testing MSE: 1.2515\nTraining R2: 0.0244, Testing R2: -0.0734\n---\nRandom State: 120.0\nTraining MSE: 5.0471, Testing MSE: 1.3108\nTraining R2: 0.0000, Testing R2: -0.0620\n---\nRandom State: 151.0\nTraining MSE: 5.0365, Testing MSE: 1.3962\nTraining R2: 0.0030, Testing R2: -0.3581\n---\nRandom State: 131.0\nTraining MSE: 4.9404, Testing MSE: 1.5237\nTraining R2: 0.0068, Testing R2: 0.0288\n---\nRandom State: 126.0\nTraining MSE: 5.0216, Testing MSE: 1.5366\nTraining R2: 0.0001, Testing R2: -0.8160\n---\nRandom State: 107.0\nTraining MSE: 4.8814, Testing MSE: 1.6110\nTraining R2: 0.0173, Testing R2: -0.1673\n---\nRandom State: 29.0\nTraining MSE: 4.9648, Testing MSE: 1.6152\nTraining R2: 0.0012, Testing R2: -0.0977\n---\nRandom State: 18.0\nTraining MSE: 4.9779, Testing MSE: 1.6435\nTraining R2: 0.0024, Testing R2: -1.2548\n---\nRandom State: 66.0\nTraining MSE: 4.9722, Testing MSE: 1.6516\nTraining R2: 0.0000, Testing R2: -0.2598\n---\nRandom State: 83.0\nTraining MSE: 4.9098, Testing MSE: 1.6641\nTraining R2: 0.0151, Testing R2: -0.8105\n---\nRandom State: 98.0\nTraining MSE: 4.9298, Testing MSE: 1.7036\nTraining R2: 0.0066, Testing R2: -0.1450\n---\nRandom State: 75.0\nTraining MSE: 4.9775, Testing MSE: 1.7036\nTraining R2: 0.0010, Testing R2: -0.5687\n---\nRandom State: 11.0\nTraining MSE: 4.7609, Testing MSE: 1.7147\nTraining R2: 0.0300, Testing R2: -0.0299\n---\nRandom State: 175.0\nTraining MSE: 4.9655, Testing MSE: 1.7405\nTraining R2: 0.0038, Testing R2: -1.3991\n---\nRandom State: 15.0\nTraining MSE: 4.9293, Testing MSE: 1.7659\nTraining R2: 0.0002, Testing R2: -0.0872\n---\nRandom State: 118.0\nTraining MSE: 4.9589, Testing MSE: 1.7759\nTraining R2: 0.0000, Testing R2: -0.6551\n---\nRandom State: 167.0\nTraining MSE: 4.7399, Testing MSE: 1.8350\nTraining R2: 0.0174, Testing R2: 0.1451\n---\nRandom State: 136.0\nTraining MSE: 4.8259, Testing MSE: 1.8824\nTraining R2: 0.0087, Testing R2: 0.0261\n---\nRandom State: 17.0\nTraining MSE: 4.8984, Testing MSE: 1.9529\nTraining R2: 0.0024, Testing R2: -0.2870\n---\nRandom State: 102.0\nTraining MSE: 4.8544, Testing MSE: 1.9564\nTraining R2: 0.0045, Testing R2: -0.0169\n---\nRandom State: 146.0\nTraining MSE: 4.7077, Testing MSE: 1.9636\nTraining R2: 0.0519, Testing R2: -1.0847\n---\nRandom State: 8.0\nTraining MSE: 4.8823, Testing MSE: 1.9655\nTraining R2: 0.0154, Testing R2: -0.6784\n---\nRandom State: 191.0\nTraining MSE: 4.8112, Testing MSE: 2.0082\nTraining R2: 0.0246, Testing R2: -0.7234\n---\nRandom State: 192.0\nTraining MSE: 4.7429, Testing MSE: 2.0365\nTraining R2: 0.0181, Testing R2: 0.0243\n---\nRandom State: 78.0\nTraining MSE: 4.6560, Testing MSE: 2.0895\nTraining R2: 0.0361, Testing R2: -0.0684\n---\nRandom State: 112.0\nTraining MSE: 4.7581, Testing MSE: 2.1009\nTraining R2: 0.0164, Testing R2: -0.0955\n---\nRandom State: 183.0\nTraining MSE: 4.8385, Testing MSE: 2.1380\nTraining R2: 0.0000, Testing R2: -0.1182\n---\nRandom State: 74.0\nTraining MSE: 4.8067, Testing MSE: 2.2173\nTraining R2: 0.0000, Testing R2: -0.0063\n---\nRandom State: 138.0\nTraining MSE: 4.7549, Testing MSE: 2.2757\nTraining R2: 0.0067, Testing R2: 0.0044\n---\nRandom State: 114.0\nTraining MSE: 4.7072, Testing MSE: 2.2816\nTraining R2: 0.0353, Testing R2: -1.2940\n---\nRandom State: 150.0\nTraining MSE: 4.7929, Testing MSE: 2.2893\nTraining R2: 0.0001, Testing R2: -0.0173\n---\nRandom State: 24.0\nTraining MSE: 4.6847, Testing MSE: 2.2962\nTraining R2: 0.0331, Testing R2: -0.3473\n---\nRandom State: 45.0\nTraining MSE: 4.7528, Testing MSE: 2.3074\nTraining R2: 0.0131, Testing R2: -0.0813\n---\nRandom State: 72.0\nTraining MSE: 4.7828, Testing MSE: 2.3522\nTraining R2: 0.0033, Testing R2: -0.0615\n---\nRandom State: 84.0\nTraining MSE: 4.7195, Testing MSE: 2.3834\nTraining R2: 0.0167, Testing R2: -0.1221\n---\nRandom State: 103.0\nTraining MSE: 4.8092, Testing MSE: 2.3860\nTraining R2: 0.0013, Testing R2: -0.5187\n---\nRandom State: 113.0\nTraining MSE: 4.8518, Testing MSE: 2.4379\nTraining R2: 0.0016, Testing R2: -2.7866\n---\nRandom State: 26.0\nTraining MSE: 4.7509, Testing MSE: 2.4462\nTraining R2: 0.0037, Testing R2: -0.0920\n---\nRandom State: 170.0\nTraining MSE: 4.5029, Testing MSE: 2.4735\nTraining R2: 0.0293, Testing R2: 0.1077\n---\nRandom State: 177.0\nTraining MSE: 4.6753, Testing MSE: 2.5240\nTraining R2: 0.0095, Testing R2: -0.0858\n---\nRandom State: 186.0\nTraining MSE: 4.6761, Testing MSE: 2.6024\nTraining R2: 0.0154, Testing R2: -0.1549\n---\nRandom State: 128.0\nTraining MSE: 4.7610, Testing MSE: 2.6107\nTraining R2: 0.0013, Testing R2: -0.7651\n---\nRandom State: 89.0\nTraining MSE: 4.7841, Testing MSE: 2.6131\nTraining R2: 0.0002, Testing R2: -1.3538\n---\nRandom State: 153.0\nTraining MSE: 4.4095, Testing MSE: 2.6948\nTraining R2: 0.0440, Testing R2: 0.0752\n---\nRandom State: 133.0\nTraining MSE: 4.6775, Testing MSE: 2.7054\nTraining R2: 0.0025, Testing R2: -0.0669\n---\nRandom State: 57.0\nTraining MSE: 4.6812, Testing MSE: 2.7088\nTraining R2: 0.0000, Testing R2: -0.0391\n---\nRandom State: 54.0\nTraining MSE: 4.6747, Testing MSE: 2.7248\nTraining R2: 0.0001, Testing R2: -0.0100\n---\nRandom State: 164.0\nTraining MSE: 4.6253, Testing MSE: 2.7330\nTraining R2: 0.0325, Testing R2: -0.9048\n---\n","output_type":"stream"}]},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"# Box-Cox Checking Plot Before and After Tranfrormation ","metadata":{}},{"cell_type":"code","source":"'''X_train_log_transformed= pd.DataFrame(X_train_log_transformed,columns=X_train.columns)\nfor col in X_train_log_transformed.columns:\n    plt.figure(figsize=(14,4))\n    plt.subplot(121)\n    sns.distplot(X_train[col])\n    plt.title(col)\n    \n    plt.subplot(122)\n    sns.distplot(X_train_log_transformed[col])\n    plt.title(col)\n    \n    plt.show()'''\n","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:38.712726Z","iopub.execute_input":"2024-07-22T01:28:38.713178Z","iopub.status.idle":"2024-07-22T01:28:38.721354Z","shell.execute_reply.started":"2024-07-22T01:28:38.713141Z","shell.execute_reply":"2024-07-22T01:28:38.720021Z"},"trusted":true},"execution_count":144,"outputs":[{"execution_count":144,"output_type":"execute_result","data":{"text/plain":"'X_train_log_transformed= pd.DataFrame(X_train_log_transformed,columns=X_train.columns)\\nfor col in X_train_log_transformed.columns:\\n    plt.figure(figsize=(14,4))\\n    plt.subplot(121)\\n    sns.distplot(X_train[col])\\n    plt.title(col)\\n    \\n    plt.subplot(122)\\n    sns.distplot(X_train_log_transformed[col])\\n    plt.title(col)\\n    \\n    plt.show()'"},"metadata":{}}]},{"cell_type":"markdown","source":"# Checking Plot Before and After Tranfrormation ","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize=(10,3))\nplt.subplot(121)\nsns.distplot(X_train['HbA1c'])\nplt.title('HbA1c PDF')\n\nplt.figure(figsize=(14,4))\nplt.subplot(121)\nsns.distplot(X_train_log_transformed['HbA1c'])\nplt.title('HbA1c PDF')\n\nplt.figure(figsize=(14,4))\n\nplt.subplot(121)\nstats.probplot(X_train['HbA1c'], dist=\"norm\", plot=plt)\nplt.title('HbA1c Before ')\n\nplt.subplot(122)\nstats.probplot(X_train_log_transformed['HbA1c'], dist=\"norm\", plot=plt)\nplt.title('HbA1c After ')","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:38.722757Z","iopub.execute_input":"2024-07-22T01:28:38.723163Z","iopub.status.idle":"2024-07-22T01:28:39.384502Z","shell.execute_reply.started":"2024-07-22T01:28:38.723129Z","shell.execute_reply":"2024-07-22T01:28:39.382822Z"},"trusted":true},"execution_count":145,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_32/3107429556.py:3: UserWarning: \n\n`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n\nPlease adapt your code to use either `displot` (a figure-level function with\nsimilar flexibility) or `histplot` (an axes-level function for histograms).\n\nFor a guide to updating your code to use the new functions, please see\nhttps://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n\n  sns.distplot(X_train['HbA1c'])\n/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","Cell \u001b[0;32mIn[145], line 8\u001b[0m\n\u001b[1;32m      6\u001b[0m plt\u001b[38;5;241m.\u001b[39mfigure(figsize\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m14\u001b[39m,\u001b[38;5;241m4\u001b[39m))\n\u001b[1;32m      7\u001b[0m plt\u001b[38;5;241m.\u001b[39msubplot(\u001b[38;5;241m121\u001b[39m)\n\u001b[0;32m----> 8\u001b[0m sns\u001b[38;5;241m.\u001b[39mdistplot(\u001b[43mX_train_log_transformed\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mHbA1c\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m)\n\u001b[1;32m      9\u001b[0m plt\u001b[38;5;241m.\u001b[39mtitle(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mHbA1c PDF\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m     11\u001b[0m plt\u001b[38;5;241m.\u001b[39mfigure(figsize\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m14\u001b[39m,\u001b[38;5;241m4\u001b[39m))\n","\u001b[0;31mIndexError\u001b[0m: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices"],"ename":"IndexError","evalue":"only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices","output_type":"error"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x300 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1400x400 with 1 Axes>","image/png":"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KwAAwGrECgAAsBqxAgAArEasAAAAqxErAADAasQKAACwGrECAACsRqwAAACrESsAAMBqxAoAALAasQIAAKxGrAAAAKsRKwAAwGrECgAAsBqxAgAArEasAAAAqxErAADAasQKAACwGrECAACsRqwAAACrESsAAMBqxAoAALAasQIAAKxGrAAAAKsRKwAAwGrECgAAsBqxAgAArEasAAAAqxErAADAasQKAACwGrECAACsRqwAAACrESsAAMBqxAoAALAasQIAAKxGrAAAAKsRKwAAwGrECgAAsBqxAgAArEasAAAAqxErAADAasQKAACwGrECAACsRqwAAACrESsAAMBqxAoAALAasQIAAKxGrAAAAKsNKlbq6uqUm5ur1NRU+Xw+7d+//7zzT548qYqKCmVnZ8vtdmv69OlqbGwc1IIBAMDYMs7pAdu2bVMgEFB9fb18Pp9qa2tVVFSkI0eOKDMz85z5PT09+uUvf6nMzEy99tprysnJ0aeffqpJkyYNxfoBAECCSzLGGCcH+Hw+3XDDDdq0aZMkKRaLyev16v7779fKlSvPmV9fX68///nPOnz4sMaPHz+oRUajUaWnpysSiSgtLW1Q9wEAAIbfcDxnO3oZqKenRy0tLfL7/d/eQXKy/H6/mpub+z3mjTfeUGFhoSoqKuTxeDRz5kytX79evb29A56nu7tb0Wi0zw0AAIxNjmKls7NTvb298ng8fcY9Ho9CoVC/x7S1tem1115Tb2+vGhsbtWbNGj311FN67LHHBjxPTU2N0tPT4zev1+tkmQAAIIEM+6eBYrGYMjMz9dxzzyk/P18lJSVatWqV6uvrBzymsrJSkUgkfuvo6BjuZQIAAEs5eoNtRkaGUlJSFA6H+4yHw2FlZWX1e0x2drbGjx+vlJSU+NjVV1+tUCiknp4euVyuc45xu91yu91OlgYAABKUoysrLpdL+fn5CgaD8bFYLKZgMKjCwsJ+j5k/f76OHj2qWCwWH/voo4+UnZ3db6gAAAD8L8cvAwUCAW3evFkvvviiDh06pHvvvVddXV0qLy+XJJWWlqqysjI+/95779UXX3yhBx54QB999JF27typ9evXq6KiYugeBQAASFiOv2elpKREJ06cUFVVlUKhkPLy8tTU1BR/0217e7uSk79tIK/Xq127dmn58uW67rrrlJOTowceeEArVqwYukcBAAASluPvWRkNfM8KAAA/DKP+PSsAAAAjjVgBAABWI1YAAIDViBUAAGA1YgUAAFiNWAEAAFYjVgAAgNWIFQAAYDViBQAAWI1YAQAAViNWAACA1YgVAABgNWIFAABYjVgBAABWI1YAAIDViBUAAGA1YgUAAFiNWAEAAFYjVgAAgNWIFQAAYDViBQAAWI1YAQAAViNWAACA1YgVAABgNWIFAABYjVgBAABWI1YAAIDViBUAAGA1YgUAAFiNWAEAAFYjVgAAgNWIFQAAYDViBQAAWI1YAQAAViNWAACA1YgVAABgNWIFAABYjVgBAABWI1YAAIDViBUAAGA1YgUAAFiNWAEAAFYjVgAAgNWIFQAAYDViBQAAWI1YAQAAViNWAACA1YgVAABgNWIFAABYjVgBAABWI1YAAIDVBhUrdXV1ys3NVWpqqnw+n/bv339RxzU0NCgpKUmLFy8ezGkBAMAY5DhWtm3bpkAgoOrqah04cECzZ89WUVGRjh8/ft7jPvnkE/3hD3/QggULBr1YAAAw9jiOlY0bN+quu+5SeXm5rrnmGtXX1+uSSy7R1q1bBzymt7dXt99+u9auXaupU6d+rwUDAICxxVGs9PT0qKWlRX6//9s7SE6W3+9Xc3PzgMc9+uijyszM1B133HFR5+nu7lY0Gu1zAwAAY5OjWOns7FRvb688Hk+fcY/Ho1Ao1O8xe/fu1ZYtW7R58+aLPk9NTY3S09PjN6/X62SZAAAggQzrp4FOnTqlZcuWafPmzcrIyLjo4yorKxWJROK3jo6OYVwlAACw2TgnkzMyMpSSkqJwONxnPBwOKysr65z5H3/8sT755BMVFxfHx2Kx2NcnHjdOR44c0bRp0845zu12y+12O1kaAABIUI6urLhcLuXn5ysYDMbHYrGYgsGgCgsLz5k/Y8YMvf/++2ptbY3fbr31Vt18881qbW3l5R0AAHBBjq6sSFIgEFBZWZkKCgo0d+5c1dbWqqurS+Xl5ZKk0tJS5eTkqKamRqmpqZo5c2af4ydNmiRJ54wDAAD0x3GslJSU6MSJE6qqqlIoFFJeXp6amprib7ptb29XcjJfjAsAAIZGkjHGjPYiLiQajSo9PV2RSERpaWmjvRwAADCA4XjO5hIIAACwGrECAACsRqwAAACrESsAAMBqxAoAALAasQIAAKxGrAAAAKsRKwAAwGrECgAAsBqxAgAArEasAAAAqxErAADAasQKAACwGrECAACsRqwAAACrESsAAMBqxAoAALAasQIAAKxGrAAAAKsRKwAAwGrECgAAsBqxAgAArEasAAAAqxErAADAasQKAACwGrECAACsRqwAAACrESsAAMBqxAoAALAasQIAAKxGrAAAAKsRKwAAwGrECgAAsBqxAgAArEasAAAAqxErAADAasQKAACwGrECAACsRqwAAACrESsAAMBqxAoAALAasQIAAKxGrAAAAKsRKwAAwGrECgAAsBqxAgAArEasAAAAqxErAADAasQKAACwGrECAACsNqhYqaurU25urlJTU+Xz+bR///4B527evFkLFizQ5MmTNXnyZPn9/vPOBwAA+F+OY2Xbtm0KBAKqrq7WgQMHNHv2bBUVFen48eP9zt+zZ4+WLFmit99+W83NzfJ6vbrlllv02Weffe/FAwCAxJdkjDFODvD5fLrhhhu0adMmSVIsFpPX69X999+vlStXXvD43t5eTZ48WZs2bVJpaelFnTMajSo9PV2RSERpaWlOlgsAAEbQcDxnO7qy0tPTo5aWFvn9/m/vIDlZfr9fzc3NF3Ufp0+f1pkzZ3TZZZc5WykAABiTxjmZ3NnZqd7eXnk8nj7jHo9Hhw8fvqj7WLFihaZMmdIneL6ru7tb3d3d8Z+j0aiTZQIAgAQyop8G2rBhgxoaGrR9+3alpqYOOK+mpkbp6enxm9frHcFVAgAAmziKlYyMDKWkpCgcDvcZD4fDysrKOu+xTz75pDZs2KC33npL11133XnnVlZWKhKJxG8dHR1OlgkAABKIo1hxuVzKz89XMBiMj8ViMQWDQRUWFg543BNPPKF169apqalJBQUFFzyP2+1WWlpanxsAABibHL1nRZICgYDKyspUUFCguXPnqra2Vl1dXSovL5cklZaWKicnRzU1NZKkP/3pT6qqqtLLL7+s3NxchUIhSdKll16qSy+9dAgfCgAASESOY6WkpEQnTpxQVVWVQqGQ8vLy1NTUFH/TbXt7u5KTv71g8+yzz6qnp0e//vWv+9xPdXW1Hnnkke+3egAAkPAcf8/KaOB7VgAA+GEY9e9ZAQAAGGnECgAAsBqxAgAArEasAAAAqxErAADAasQKAACwGrECAACsRqwAAACrESsAAMBqxAoAALAasQIAAKxGrAAAAKsRKwAAwGrE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"},"metadata":{}}]},{"cell_type":"markdown","source":"# Function for Tuning Remaining Transforms","metadata":{}},{"cell_type":"code","source":"def apply_transform(transform):\n    ### Independent and Dependent features\n    X= df[['HbA1c']] ### Independent feaure should be data frame or 2D array.\n    y=df['E-xLR'] ### This variable can be serier or 1D array\n    \n    trf = ColumnTransformer([('log',FunctionTransformer(transform),['HbA1c'])],remainder='passthrough')\n    \n    X_transformed = trf.fit_transform(X) #Tranfromed X value\n    \n    regression=LinearRegression(n_jobs=-1)\n    \n    #print('Mean squared error',np.mean(cross_val_score(regression,X_transformed,y,scoring='neg_mean_squared_error',cv=5)))\n    \n    # Perform cross-validation\n    scores = cross_validate(regression, X_transformed, y, cv=5, scoring='neg_mean_squared_error')\n\n    # Print the mean squared error (negative because Scikit-Learn uses negated values)\n    print(f\"Mean squared error: {-scores['test_score'].mean():.4f}\")\n    \n    plt.figure(figsize=(14,4))\n\n    plt.subplot(121)\n    stats.probplot(X['HbA1c'], dist=\"norm\", plot=plt)\n    plt.title('HbA1c Before ')\n\n    plt.subplot(122)\n    stats.probplot(X_transformed[:,0], dist=\"norm\", plot=plt)\n    plt.title('HbA1c After ')\n    \n    plt.show() ","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:39.386195Z","iopub.status.idle":"2024-07-22T01:28:39.386787Z","shell.execute_reply.started":"2024-07-22T01:28:39.386484Z","shell.execute_reply":"2024-07-22T01:28:39.386510Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#apply_transform(lambda x: x)  #Without tranform\n#apply_transform(lambda x: x**2) # Square x values\n#apply_transform(lambda x: x**3) # Cube x values\n#apply_transform(lambda x: x**(1/2)) # Square root of x values\napply_transform(lambda x: 1/(x+0.0000001) ) # Reciprocal\n#apply_transform(lambda x: x**(1/1.2)) # Exponential transform\n#apply_transform(np.sin) # Sine function\n#apply_transform(np.log1p) # log function","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:39.388129Z","iopub.status.idle":"2024-07-22T01:28:39.388698Z","shell.execute_reply.started":"2024-07-22T01:28:39.388390Z","shell.execute_reply":"2024-07-22T01:28:39.388414Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#from sklearn.linear_model import LinearRegression\n# Make predictions on new data\n#new_data = np.array([[7]]) # Replace with the actual value you want to predict on\n#predictions = regression.predict(new_data)\n#print(\"Predictions:\", predictions)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:39.390465Z","iopub.status.idle":"2024-07-22T01:28:39.390849Z","shell.execute_reply.started":"2024-07-22T01:28:39.390663Z","shell.execute_reply":"2024-07-22T01:28:39.390679Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"### Prediction new data\n#regression.predict(scaler.transform([[4.7]]))","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:39.392798Z","iopub.status.idle":"2024-07-22T01:28:39.393347Z","shell.execute_reply.started":"2024-07-22T01:28:39.393063Z","shell.execute_reply":"2024-07-22T01:28:39.393093Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# HyperParameter tuning","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import LinearRegression\n\ndf = pd.read_csv('/kaggle/input/e-xlr/E-xLR DATA - Sheet1.csv')\n\n### Independent and Dependent features\nX= df[['HbA1c']] ### Independent feaure should be data frame or 2D array.\ny=df['E-xLR'] ### This variable can be serier or 1D array\n\n### Train Test Split\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test= train_test_split(X,y,test_size=0.25,random_state=42)\n\nparameters= {\n        'fit_intercept': [True, False],\n    'copy_X': [True, False],\n    'n_jobs':[-1,1],\n    'positive': [True, False]\n}\n\n###LinearRegression \nmodel = LinearRegression()\ngrid_search = GridSearchCV(model, parameters, cv=5)  # 5-fold cross-validation\ngrid_search.fit(X, y)\nbest_params = grid_search.best_params_\nprint(\"Best hyperparameters:\", best_params)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:39.394868Z","iopub.status.idle":"2024-07-22T01:28:39.395406Z","shell.execute_reply.started":"2024-07-22T01:28:39.395134Z","shell.execute_reply":"2024-07-22T01:28:39.395157Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Ridge Regression Implementation","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import Ridge\nfrom sklearn.model_selection import GridSearchCV\n\nridge_regressor=Ridge()\nparameters={'alpha':[1e-15,1e-10,1e-8,1e-3,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100]}\nridgecv=GridSearchCV(ridge_regressor,parameters,scoring='neg_mean_squared_error',cv=5)\nridgecv.fit(X_train,y_train)\n\nprint(ridgecv.best_params_)\nprint(-(ridgecv.best_score_))\n\nridge_pred=ridgecv.predict(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:29:48.337748Z","iopub.execute_input":"2024-07-22T01:29:48.338227Z","iopub.status.idle":"2024-07-22T01:29:49.307455Z","shell.execute_reply.started":"2024-07-22T01:29:48.338182Z","shell.execute_reply":"2024-07-22T01:29:49.306382Z"},"trusted":true},"execution_count":146,"outputs":[{"name":"stdout","text":"{'alpha': 12}\n4.292532275649142\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Variance of Ridge","metadata":{}},{"cell_type":"code","source":"import seaborn as sns\nsns.displot(ridge_pred-y_test,kind='kde')","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:39.408745Z","iopub.status.idle":"2024-07-22T01:28:39.409298Z","shell.execute_reply.started":"2024-07-22T01:28:39.408992Z","shell.execute_reply":"2024-07-22T01:28:39.409018Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Metrics of Test set of Ridge","metadata":{}},{"cell_type":"code","source":"#y_pred=regression.predict(X_test_log_transformed)\nridge_pred=ridgecv.predict(X_test)\nridge_train_pred=ridgecv.predict(X_train)\n### Performance metrics\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\n\n#Training error\nmse=mean_squared_error(y_train, ridge_train_pred)\nmae=mean_absolute_error(y_train,ridge_train_pred)\nrmse=np.sqrt(mse)\nprint('mse train',mse)\nprint('mae train',mae)\nprint('rmse train',rmse)\n\n###R square Formula\n# R^2 = 1- ssr /sst\n# R^2 = coefficient of determination SSR = sum of squares of residuals SST = total sum of squares\nfrom sklearn.metrics import r2_score\nscore=r2_score(y_train,ridge_train_pred)\nprint('r2_score_train',score)\n\n\n#Testing error\nmse=mean_squared_error(y_test, ridge_pred)\nmae=mean_absolute_error(y_test,ridge_pred)\nrmse=np.sqrt(mse)\nprint('mse test',mse)\nprint('mae test',mae)\nprint('rmse test',rmse)\n\n###R square Formula\n# R^2 = 1- ssr /sst\n# R^2 = coefficient of determination SSR = sum of squares of residuals SST = total sum of squares\nfrom sklearn.metrics import r2_score\nscore=r2_score(y_test,ridge_pred)\nprint('r2_score_test',score)\n\n### Adjusted R^2 = 1-[(1-R^2)*(n-1)/(n-k-1)]\n# where  R^2:The R^2 of model n: The number of observations  k: the number of predictor variables\n### Display adjusted R- squared\n1-(1-score)*(len(y_test)-1)/(len(y_test)-X_test.shape[1]-1)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:29:55.756863Z","iopub.execute_input":"2024-07-22T01:29:55.757401Z","iopub.status.idle":"2024-07-22T01:29:55.781640Z","shell.execute_reply.started":"2024-07-22T01:29:55.757360Z","shell.execute_reply":"2024-07-22T01:29:55.780411Z"},"trusted":true},"execution_count":147,"outputs":[{"name":"stdout","text":"mse train 4.078396888898145\nmae train 1.4318230674338432\nrmse train 2.019504119554636\nr2_score_train 0.12413727697877297\nmse test 3.249770089995632\nmae test 1.482778958870853\nrmse test 1.8027118710419678\nr2_score_test -0.24861193613210553\n","output_type":"stream"},{"execution_count":147,"output_type":"execute_result","data":{"text/plain":"-0.3377985029986843"},"metadata":{}}]},{"cell_type":"markdown","source":"# Random Values","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import mean_squared_error, r2_score\n\n# Function to evaluate model performance\ndef evaluate_model(random_state):\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=random_state)\n    \n    # Applying Linear Regression\n    ridge_regressor=Ridge()\n    ridgecv.fit(X_train,y_train)\n    ridge_pred=ridgecv.predict(X_test)\n    ridge_train_pred=ridgecv.predict(X_train)\n    \n    mse_train = mean_squared_error(y_train, ridge_train_pred)\n    mse_test = mean_squared_error(y_test, ridge_pred)\n    r2_train = r2_score(y_train, ridge_train_pred)\n    r2_test = r2_score(y_test, ridge_pred)\n    \n    return random_state, mse_train, mse_test, r2_train, r2_test\n\n# Iterate over different random_state values\nresults = []\nfor random_state in range(100):\n    results.append(evaluate_model(random_state))\n\n# Convert results to DataFrame\nresults_df = pd.DataFrame(results, columns=['random_state', 'mse_train', 'mse_test', 'r2_train', 'r2_test'])\n\n# Find the best random_state values based on Test MSE\nbest_random_states = results_df.nsmallest(50, 'mse_test')\n\n# Print the training and testing MSE with respect to the best random_state values\nprint(\"Best random_state values based on Test MSE:\")\nfor index, row in best_random_states.iterrows():\n    print(f\"Random State: {row['random_state']}\")\n    print(f\"Training MSE: {row['mse_train']:.4f}, Testing MSE: {row['mse_test']:.4f}\")\n    print(f\"Training R2: {row['r2_train']:.4f}, Testing R2: {row['r2_test']:.4f}\")\n    print(\"---\")\n","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:29:59.843241Z","iopub.execute_input":"2024-07-22T01:29:59.843668Z","iopub.status.idle":"2024-07-22T01:31:37.990563Z","shell.execute_reply.started":"2024-07-22T01:29:59.843632Z","shell.execute_reply":"2024-07-22T01:31:37.989382Z"},"trusted":true},"execution_count":148,"outputs":[{"name":"stdout","text":"Best random_state values based on Test MSE:\nRandom State: 75.0\nTraining MSE: 4.6453, Testing MSE: 1.1597\nTraining R2: 0.0676, Testing R2: -0.0678\n---\nRandom State: 82.0\nTraining MSE: 4.6164, Testing MSE: 1.1854\nTraining R2: 0.0930, Testing R2: -0.1065\n---\nRandom State: 11.0\nTraining MSE: 4.5645, Testing MSE: 1.4135\nTraining R2: 0.0700, Testing R2: 0.1510\n---\nRandom State: 66.0\nTraining MSE: 4.5573, Testing MSE: 1.4246\nTraining R2: 0.0834, Testing R2: -0.0866\n---\nRandom State: 15.0\nTraining MSE: 4.5029, Testing MSE: 1.6393\nTraining R2: 0.0867, Testing R2: -0.0092\n---\nRandom State: 83.0\nTraining MSE: 4.5197, Testing MSE: 1.6632\nTraining R2: 0.0934, Testing R2: -0.8095\n---\nRandom State: 29.0\nTraining MSE: 4.4428, Testing MSE: 1.8376\nTraining R2: 0.1062, Testing R2: -0.2488\n---\nRandom State: 76.0\nTraining MSE: 4.4403, Testing MSE: 1.8844\nTraining R2: 0.0614, Testing R2: 0.0121\n---\nRandom State: 18.0\nTraining MSE: 4.4734, Testing MSE: 1.8881\nTraining R2: 0.1035, Testing R2: -1.5903\n---\nRandom State: 17.0\nTraining MSE: 4.4325, Testing MSE: 1.9513\nTraining R2: 0.0973, Testing R2: -0.2860\n---\nRandom State: 26.0\nTraining MSE: 4.4186, Testing MSE: 2.0546\nTraining R2: 0.0734, Testing R2: 0.0828\n---\nRandom State: 45.0\nTraining MSE: 4.3816, Testing MSE: 2.0795\nTraining R2: 0.0902, Testing R2: 0.0255\n---\nRandom State: 71.0\nTraining MSE: 4.3616, Testing MSE: 2.1617\nTraining R2: 0.0576, Testing R2: 0.2463\n---\nRandom State: 84.0\nTraining MSE: 4.3833, Testing MSE: 2.1637\nTraining R2: 0.0867, Testing R2: -0.0186\n---\nRandom State: 54.0\nTraining MSE: 4.3576, Testing MSE: 2.2052\nTraining R2: 0.0679, Testing R2: 0.1826\n---\nRandom State: 57.0\nTraining MSE: 4.3915, Testing MSE: 2.2404\nTraining R2: 0.0619, Testing R2: 0.1406\n---\nRandom State: 24.0\nTraining MSE: 4.3459, Testing MSE: 2.2752\nTraining R2: 0.1030, Testing R2: -0.3350\n---\nRandom State: 8.0\nTraining MSE: 4.3827, Testing MSE: 2.2816\nTraining R2: 0.1162, Testing R2: -0.9483\n---\nRandom State: 49.0\nTraining MSE: 4.3287, Testing MSE: 2.2959\nTraining R2: 0.0795, Testing R2: 0.1117\n---\nRandom State: 78.0\nTraining MSE: 4.3297, Testing MSE: 2.3479\nTraining R2: 0.1037, Testing R2: -0.2006\n---\nRandom State: 98.0\nTraining MSE: 4.3139, Testing MSE: 2.3869\nTraining R2: 0.1307, Testing R2: -0.6042\n---\nRandom State: 91.0\nTraining MSE: 4.4402, Testing MSE: 2.3958\nTraining R2: 0.1306, Testing R2: -6.4900\n---\nRandom State: 74.0\nTraining MSE: 4.2599, Testing MSE: 2.5261\nTraining R2: 0.1138, Testing R2: -0.1465\n---\nRandom State: 50.0\nTraining MSE: 4.3018, Testing MSE: 2.5281\nTraining R2: 0.0514, Testing R2: 0.1967\n---\nRandom State: 72.0\nTraining MSE: 4.2134, Testing MSE: 2.7543\nTraining R2: 0.1220, Testing R2: -0.2429\n---\nRandom State: 21.0\nTraining MSE: 4.1932, Testing MSE: 2.8419\nTraining R2: 0.0934, Testing R2: 0.0106\n---\nRandom State: 90.0\nTraining MSE: 4.2047, Testing MSE: 2.8534\nTraining R2: 0.0910, Testing R2: -0.0717\n---\nRandom State: 86.0\nTraining MSE: 4.1683, Testing MSE: 2.8745\nTraining R2: 0.0953, Testing R2: -0.0015\n---\nRandom State: 69.0\nTraining MSE: 4.1915, Testing MSE: 2.8970\nTraining R2: 0.0774, Testing R2: 0.0991\n---\nRandom State: 52.0\nTraining MSE: 4.1749, Testing MSE: 2.9714\nTraining R2: 0.0753, Testing R2: 0.1037\n---\nRandom State: 5.0\nTraining MSE: 4.1476, Testing MSE: 2.9986\nTraining R2: 0.0821, Testing R2: 0.0378\n---\nRandom State: 4.0\nTraining MSE: 4.1304, Testing MSE: 3.0486\nTraining R2: 0.1045, Testing R2: -0.0833\n---\nRandom State: 12.0\nTraining MSE: 4.1175, Testing MSE: 3.1130\nTraining R2: 0.0899, Testing R2: -0.0180\n---\nRandom State: 89.0\nTraining MSE: 4.1951, Testing MSE: 3.1561\nTraining R2: 0.1233, Testing R2: -1.8430\n---\nRandom State: 85.0\nTraining MSE: 4.1031, Testing MSE: 3.1954\nTraining R2: 0.0813, Testing R2: 0.0867\n---\nRandom State: 32.0\nTraining MSE: 4.0906, Testing MSE: 3.2060\nTraining R2: 0.1199, Testing R2: -0.1391\n---\nRandom State: 23.0\nTraining MSE: 4.0923, Testing MSE: 3.2430\nTraining R2: 0.0879, Testing R2: -0.0313\n---\nRandom State: 46.0\nTraining MSE: 4.0784, Testing MSE: 3.2498\nTraining R2: 0.1241, Testing R2: -0.2486\n---\nRandom State: 63.0\nTraining MSE: 4.0658, Testing MSE: 3.3115\nTraining R2: 0.0613, Testing R2: 0.1683\n---\nRandom State: 48.0\nTraining MSE: 4.0566, Testing MSE: 3.3505\nTraining R2: 0.1019, Testing R2: -0.0401\n---\nRandom State: 20.0\nTraining MSE: 4.0587, Testing MSE: 3.4060\nTraining R2: 0.0764, Testing R2: 0.0963\n---\nRandom State: 30.0\nTraining MSE: 4.0422, Testing MSE: 3.4664\nTraining R2: 0.0880, Testing R2: -0.0208\n---\nRandom State: 41.0\nTraining MSE: 4.0132, Testing MSE: 3.4751\nTraining R2: 0.0941, Testing R2: 0.0474\n---\nRandom State: 47.0\nTraining MSE: 4.0040, Testing MSE: 3.5026\nTraining R2: 0.0875, Testing R2: 0.0690\n---\nRandom State: 38.0\nTraining MSE: 4.0066, Testing MSE: 3.5075\nTraining R2: 0.0932, Testing R2: 0.0445\n---\nRandom State: 64.0\nTraining MSE: 4.0198, Testing MSE: 3.6471\nTraining R2: 0.0587, Testing R2: 0.1379\n---\nRandom State: 1.0\nTraining MSE: 3.9743, Testing MSE: 3.7326\nTraining R2: 0.0616, Testing R2: 0.1047\n---\nRandom State: 36.0\nTraining MSE: 3.9975, Testing MSE: 3.7370\nTraining R2: 0.0601, Testing R2: 0.1255\n---\nRandom State: 87.0\nTraining MSE: 3.9586, Testing MSE: 3.7410\nTraining R2: 0.1037, Testing R2: -0.0526\n---\nRandom State: 51.0\nTraining MSE: 4.0378, Testing MSE: 3.7419\nTraining R2: 0.0548, Testing R2: 0.0636\n---\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Lasso Regression Implementation","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import Lasso","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:39.415083Z","iopub.status.idle":"2024-07-22T01:28:39.415757Z","shell.execute_reply.started":"2024-07-22T01:28:39.415470Z","shell.execute_reply":"2024-07-22T01:28:39.415495Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"Lasso=Lasso()","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:39.417565Z","iopub.status.idle":"2024-07-22T01:28:39.418125Z","shell.execute_reply.started":"2024-07-22T01:28:39.417814Z","shell.execute_reply":"2024-07-22T01:28:39.417838Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"parameters={'alpha':[1e-15,1e-10,1e-8,1e-3,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100]}\nLassocv=GridSearchCV(Lasso,parameters,scoring='neg_mean_squared_error',cv=5)\nLassocv.fit(X_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:39.419457Z","iopub.status.idle":"2024-07-22T01:28:39.420358Z","shell.execute_reply.started":"2024-07-22T01:28:39.420076Z","shell.execute_reply":"2024-07-22T01:28:39.420103Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(Lassocv.best_params_)\nprint((-Lassocv.best_score_))","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:39.422065Z","iopub.status.idle":"2024-07-22T01:28:39.422582Z","shell.execute_reply.started":"2024-07-22T01:28:39.422307Z","shell.execute_reply":"2024-07-22T01:28:39.422330Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"Lasso_pred=Lassocv.predict(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:39.423870Z","iopub.status.idle":"2024-07-22T01:28:39.424989Z","shell.execute_reply.started":"2024-07-22T01:28:39.424699Z","shell.execute_reply":"2024-07-22T01:28:39.424725Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import seaborn as sns\nsns.displot(Lasso_pred-y_test,kind='kde')","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:39.426661Z","iopub.status.idle":"2024-07-22T01:28:39.427203Z","shell.execute_reply.started":"2024-07-22T01:28:39.426913Z","shell.execute_reply":"2024-07-22T01:28:39.426937Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Metrics of Test set Lasso","metadata":{}},{"cell_type":"code","source":"#y_pred=regression.predict(X_test_log_transformed)\nLasso_pred=Lassocv.predict(X_test)\nLasso_train_pred=Lassocv.predict(X_train)\n### Performance metrics\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\n\n#Training error\nmse=mean_squared_error(y_train, Lasso_train_pred)\nmae=mean_absolute_error(y_train,Lasso_train_pred)\nrmse=np.sqrt(mse)\nprint('mse train',mse)\nprint('mae train',mae)\nprint('rmse train',rmse)\n\n###R square Formula\n# R^2 = 1- ssr /sst\n# R^2 = coefficient of determination SSR = sum of squares of residuals SST = total sum of squares\nfrom sklearn.metrics import r2_score\nscore=r2_score(y_train,Lasso_train_pred)\nprint('r2_score_train',score)\n\n\n#Testing error\nmse=mean_squared_error(y_test, Lasso_pred)\nmae=mean_absolute_error(y_test,Lasso_pred)\nrmse=np.sqrt(mse)\nprint('mse test',mse)\nprint('mae test',mae)\nprint('rmse test',rmse)\n\n###R square Formula\n# R^2 = 1- ssr /sst\n# R^2 = coefficient of determination SSR = sum of squares of residuals SST = total sum of squares\nfrom sklearn.metrics import r2_score\nscore=r2_score(y_test,Lasso_pred)\nprint('r2_score_test',score)\n\n### Adjusted R^2 = 1-[(1-R^2)*(n-1)/(n-k-1)]\n# where  R^2:The R^2 of model n: The number of observations  k: the number of predictor variables\n### Display adjusted R- squared\n1-(1-score)*(len(y_test)-1)/(len(y_test)-X_test.shape[1]-1)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:39.428904Z","iopub.status.idle":"2024-07-22T01:28:39.429468Z","shell.execute_reply.started":"2024-07-22T01:28:39.429172Z","shell.execute_reply":"2024-07-22T01:28:39.429197Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Method-2  Ridge Plot and Intercepts ","metadata":{}},{"cell_type":"markdown","source":"# Plot of ridge ","metadata":{}},{"cell_type":"code","source":"rr=Ridge(alpha=24)\nrr.fit(X,y)\nprint(\"Coefficient or slope:\",rr.coef_)\nprint(\"Intercept:\",rr.intercept_)\n\nplt.plot(X,y,'b.')\nplt.plot(X,rr.predict(X),color='red',label='alpha=24')\nplt.xlabel('HbA1c')\nplt.ylabel('E-xLR')","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:39.431169Z","iopub.status.idle":"2024-07-22T01:28:39.431707Z","shell.execute_reply.started":"2024-07-22T01:28:39.431424Z","shell.execute_reply":"2024-07-22T01:28:39.431448Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Plot of Lasso","metadata":{}},{"cell_type":"code","source":"ls=Ridge(alpha=1e-15)\nls.fit(X,y)\nprint(\"Coefficient or slope:\",ls.coef_)\nprint(\"Intercept:\",ls.intercept_)\n\nplt.plot(X,y,'b.')\nplt.plot(X,ls.predict(X),color='red',label='alpha=1e-15')\nplt.xlabel('HbA1c')\nplt.ylabel('E-xLR')\n","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:39.433250Z","iopub.status.idle":"2024-07-22T01:28:39.433808Z","shell.execute_reply.started":"2024-07-22T01:28:39.433515Z","shell.execute_reply":"2024-07-22T01:28:39.433549Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Remove ridge_predict= for Prediction","metadata":{}},{"cell_type":"code","source":"''' \nridge_predict=rr.predict(X_test)\n\n#import seaborn as sns\nsns.displot(ridge_predict-y_test,kind='kde')\n\n#y_pred=regression.predict(X_test_log_transformed)\nridge_predict=ridgecv.predict(X_test)\n### Performance metrics\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\n\nmse=mean_squared_error(y_test, ridge_predict)\nmae=mean_absolute_error(y_test,ridge_predict)\nrmse=np.sqrt(mse)\nprint(mse)\nprint(mae)\nprint(rmse)\n\n###R square Formula\n# R^2 = 1- ssr /sst\n# R^2 = coefficient of determination SSR = sum of squares of residuals SST = total sum of squares\nfrom sklearn.metrics import r2_score\nscore=r2_score(y_test,ridge_predict)\nprint(score)\n\n### Adjusted R^2 = 1-[(1-R^2)*(n-1)/(n-k-1)]\n# where  R^2:The R^2 of model n: The number of observations  k: the number of predictor variables\n### Display adjusted R- squared\n1-(1-score)*(len(y_test)-1)/(len(y_test)-X_test.shape[1]-1)'''\n","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:39.436089Z","iopub.status.idle":"2024-07-22T01:28:39.436651Z","shell.execute_reply.started":"2024-07-22T01:28:39.436359Z","shell.execute_reply":"2024-07-22T01:28:39.436385Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Polynomial Regression Implementation","metadata":{}},{"cell_type":"code","source":"### Independent and Dependent features\n\ndf = pd.read_csv('/kaggle/input/e-xlr/E-xLR DATA - Sheet1.csv')\nX= df[['HbA1c']] ### Independent feaure should be data frame or 2D array.\ny=df['E-xLR'] ### This variable can be serier or 1D array\n\nX_train,X_test,y_train,y_test= train_test_split(X,y,test_size=0.2,random_state=42)\n\nplt.plot(X,y,'b.')\nplt.xlabel(\"X\")\nplt.ylabel(\"y\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:39.438388Z","iopub.status.idle":"2024-07-22T01:28:39.438972Z","shell.execute_reply.started":"2024-07-22T01:28:39.438674Z","shell.execute_reply":"2024-07-22T01:28:39.438699Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Applying Polynomial regression\n#Degree 2\npoly= PolynomialFeatures(degree=2)\n\nX_train_trans= poly.fit_transform(X_train)\nX_test_trans=poly.transform(X_test)\n\nprint(\"Original data (X_train[0]):\", X_train[0])\nprint(\"Transformed data (X_train_trans[0]):\", X_train_trans[0])","metadata":{"execution":{"iopub.status.busy":"2024-07-22T01:28:39.440931Z","iopub.status.idle":"2024-07-22T01:28:39.441516Z","shell.execute_reply.started":"2024-07-22T01:28:39.441229Z","shell.execute_reply":"2024-07-22T01:28:39.441256Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]}]}