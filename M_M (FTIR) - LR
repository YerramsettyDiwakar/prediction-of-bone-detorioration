{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8828406,"sourceType":"datasetVersion","datasetId":5311647}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"raw","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-22T02:52:24.161042Z","iopub.execute_input":"2024-07-22T02:52:24.161544Z","iopub.status.idle":"2024-07-22T02:52:24.179744Z","shell.execute_reply.started":"2024-07-22T02:52:24.161503Z","shell.execute_reply":"2024-07-22T02:52:24.178384Z"}}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression,SGDRegressor\nfrom sklearn.preprocessing import PolynomialFeatures,StandardScaler\nfrom sklearn.metrics import r2_score\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.preprocessing import FunctionTransformer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import PowerTransformer\n%matplotlib inline","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:52:24.182145Z","iopub.execute_input":"2024-07-22T02:52:24.182608Z","iopub.status.idle":"2024-07-22T02:52:24.193428Z","shell.execute_reply.started":"2024-07-22T02:52:24.182566Z","shell.execute_reply":"2024-07-22T02:52:24.191870Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/m-m-ftir/M_M (FTIR) DATA - Sheet1.csv')\n\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:52:24.195939Z","iopub.execute_input":"2024-07-22T02:52:24.196472Z","iopub.status.idle":"2024-07-22T02:52:24.222175Z","shell.execute_reply.started":"2024-07-22T02:52:24.196428Z","shell.execute_reply":"2024-07-22T02:52:24.220704Z"},"trusted":true},"execution_count":24,"outputs":[{"execution_count":24,"output_type":"execute_result","data":{"text/plain":"   HbA1c  M:M (FTIR)\n0    4.2        3.05\n1    4.3        3.42\n2    4.6        3.42\n3    4.7        3.42\n4    4.8        3.11","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>HbA1c</th>\n      <th>M:M (FTIR)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>4.2</td>\n      <td>3.05</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4.3</td>\n      <td>3.42</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4.6</td>\n      <td>3.42</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4.7</td>\n      <td>3.42</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4.8</td>\n      <td>3.11</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"### scatter plot\nplt.scatter(df['HbA1c'],df['M:M (FTIR)'])\nplt.xlabel(\"HbA1c\")\nplt.ylabel(\"M:M (FTIR)\")","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:52:24.225357Z","iopub.execute_input":"2024-07-22T02:52:24.227183Z","iopub.status.idle":"2024-07-22T02:52:24.516601Z","shell.execute_reply.started":"2024-07-22T02:52:24.227139Z","shell.execute_reply":"2024-07-22T02:52:24.515200Z"},"trusted":true},"execution_count":25,"outputs":[{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"Text(0, 0.5, 'M:M (FTIR)')"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"### Correlation\ndf.corr()","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:52:24.518071Z","iopub.execute_input":"2024-07-22T02:52:24.518473Z","iopub.status.idle":"2024-07-22T02:52:24.532941Z","shell.execute_reply.started":"2024-07-22T02:52:24.518440Z","shell.execute_reply":"2024-07-22T02:52:24.531592Z"},"trusted":true},"execution_count":26,"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"               HbA1c  M:M (FTIR)\nHbA1c       1.000000   -0.090823\nM:M (FTIR) -0.090823    1.000000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>HbA1c</th>\n      <th>M:M (FTIR)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>HbA1c</th>\n      <td>1.000000</td>\n      <td>-0.090823</td>\n    </tr>\n    <tr>\n      <th>M:M (FTIR)</th>\n      <td>-0.090823</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"### Seaborn for visualizations\nimport seaborn as sns\nsns.pairplot(df)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:52:24.534328Z","iopub.execute_input":"2024-07-22T02:52:24.535144Z","iopub.status.idle":"2024-07-22T02:52:25.848401Z","shell.execute_reply.started":"2024-07-22T02:52:24.535101Z","shell.execute_reply":"2024-07-22T02:52:25.847186Z"},"trusted":true},"execution_count":27,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"execution_count":27,"output_type":"execute_result","data":{"text/plain":"<seaborn.axisgrid.PairGrid at 0x7b5aa43bdde0>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 500x500 with 6 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"### Independent and Dependent features\nX= df[['HbA1c']] ### Independent feaure should be data frame or 2D array.\ny=df['M:M (FTIR)'] ### This variable can be serier or 1D array\n","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:52:25.849690Z","iopub.execute_input":"2024-07-22T02:52:25.850044Z","iopub.status.idle":"2024-07-22T02:52:25.856274Z","shell.execute_reply.started":"2024-07-22T02:52:25.850016Z","shell.execute_reply":"2024-07-22T02:52:25.855141Z"},"trusted":true},"execution_count":28,"outputs":[]},{"cell_type":"code","source":"### Train Test Split\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test= train_test_split(X,y,test_size=0.20,random_state=0)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:52:25.857854Z","iopub.execute_input":"2024-07-22T02:52:25.858229Z","iopub.status.idle":"2024-07-22T02:52:25.869957Z","shell.execute_reply.started":"2024-07-22T02:52:25.858194Z","shell.execute_reply":"2024-07-22T02:52:25.868563Z"},"trusted":true},"execution_count":29,"outputs":[]},{"cell_type":"code","source":"### Standardization\n#from sklearn.preprocessing import StandardScaler\n\n#scaler=StandardScaler()\n#X_train=scaler.fit_transform(X_train)\n#X_test=scaler.transform(X_test)\n#X_test","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:52:25.874000Z","iopub.execute_input":"2024-07-22T02:52:25.874399Z","iopub.status.idle":"2024-07-22T02:52:25.880855Z","shell.execute_reply.started":"2024-07-22T02:52:25.874368Z","shell.execute_reply":"2024-07-22T02:52:25.879740Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(14,4))\nplt.subplot(121)\nsns.distplot(X_train['HbA1c'])\nplt.title('HbA1c PDF')\n\nplt.subplot(122)\nstats.probplot(X_train['HbA1c'], dist=\"norm\", plot=plt)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:52:25.882124Z","iopub.execute_input":"2024-07-22T02:52:25.882468Z","iopub.status.idle":"2024-07-22T02:52:26.463712Z","shell.execute_reply.started":"2024-07-22T02:52:25.882437Z","shell.execute_reply":"2024-07-22T02:52:26.462523Z"},"trusted":true},"execution_count":31,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_33/2329309956.py:3: UserWarning: \n\n`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n\nPlease adapt your code to use either `displot` (a figure-level function with\nsimilar flexibility) or `histplot` (an axes-level function for histograms).\n\nFor a guide to updating your code to use the new functions, please see\nhttps://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n\n  sns.distplot(X_train['HbA1c'])\n/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"execution_count":31,"output_type":"execute_result","data":{"text/plain":"((array([-2.28017173, -1.92017484, -1.7091256 , -1.55469152, -1.43036801,\n         -1.3249031 , -1.23241216, -1.14940983, -1.07365152, -1.00360143,\n         -0.93815914, -0.87650695, -0.81801894, -0.76220403, -0.70866868,\n         -0.65709167, -0.60720655, -0.55878903, -0.51164772, -0.46561731,\n         -0.42055328, -0.37632784, -0.33282677, -0.28994682, -0.24759369,\n         -0.20568029, -0.16412527, -0.12285188, -0.08178679, -0.04085922,\n          0.        ,  0.04085922,  0.08178679,  0.12285188,  0.16412527,\n          0.20568029,  0.24759369,  0.28994682,  0.33282677,  0.37632784,\n          0.42055328,  0.46561731,  0.51164772,  0.55878903,  0.60720655,\n          0.65709167,  0.70866868,  0.76220403,  0.81801894,  0.87650695,\n          0.93815914,  1.00360143,  1.07365152,  1.14940983,  1.23241216,\n          1.3249031 ,  1.43036801,  1.55469152,  1.7091256 ,  1.92017484,\n          2.28017173]),\n  array([ 4.2 ,  4.3 ,  4.6 ,  4.8 ,  4.8 ,  4.8 ,  4.92,  5.  ,  5.  ,\n          5.1 ,  5.1 ,  5.1 ,  5.1 ,  5.24,  5.3 ,  5.3 ,  5.39,  5.4 ,\n          5.4 ,  5.4 ,  5.4 ,  5.4 ,  5.4 ,  5.4 ,  5.5 ,  5.5 ,  5.5 ,\n          5.6 ,  5.6 ,  5.7 ,  5.7 ,  5.7 ,  5.8 ,  5.8 ,  5.8 ,  5.8 ,\n          6.1 ,  6.2 ,  6.2 ,  6.5 ,  6.5 ,  6.6 ,  6.6 ,  6.6 ,  6.8 ,\n          6.8 ,  6.8 ,  6.8 ,  6.9 ,  7.  ,  7.1 ,  7.1 ,  7.1 ,  7.2 ,\n          7.2 ,  8.1 ,  8.4 ,  8.6 ,  8.6 , 10.2 , 10.3 ])),\n (1.2154566963681788, 6.1008196721311485, 0.9370922462411593))"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1400x400 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"Log Transform","metadata":{}},{"cell_type":"code","source":"#trf= FunctionTransformer(func=np.log1p)\n#X_train= trf.fit_transform(X_train)\n#X_test= trf.transform(X_test) ","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:52:26.465274Z","iopub.execute_input":"2024-07-22T02:52:26.465607Z","iopub.status.idle":"2024-07-22T02:52:26.471231Z","shell.execute_reply.started":"2024-07-22T02:52:26.465577Z","shell.execute_reply":"2024-07-22T02:52:26.469854Z"},"trusted":true},"execution_count":32,"outputs":[]},{"cell_type":"code","source":"### Apply Simple Linear Regression\nfrom sklearn.linear_model import LinearRegression\n\nregression=LinearRegression()\n\nregression.fit(X_train,y_train)\n\nprint(\"Coefficient or slope:\",regression.coef_)\nprint(\"Intercept:\",regression.intercept_)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:52:26.472456Z","iopub.execute_input":"2024-07-22T02:52:26.472861Z","iopub.status.idle":"2024-07-22T02:52:26.486949Z","shell.execute_reply.started":"2024-07-22T02:52:26.472828Z","shell.execute_reply":"2024-07-22T02:52:26.485706Z"},"trusted":true},"execution_count":33,"outputs":[{"name":"stdout","text":"Coefficient or slope: [-0.13659604]\nIntercept: 4.319577317261532\n","output_type":"stream"}]},{"cell_type":"code","source":"### Plot training data plot best fit line\nplt.scatter(X_train,y_train)\nplt.plot(X_train,regression.predict(X_train))\nplt.xlabel('HbA1c')\nplt.ylabel('M:M (FTIR)')","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:52:26.488464Z","iopub.execute_input":"2024-07-22T02:52:26.488941Z","iopub.status.idle":"2024-07-22T02:52:26.746153Z","shell.execute_reply.started":"2024-07-22T02:52:26.488898Z","shell.execute_reply":"2024-07-22T02:52:26.744734Z"},"trusted":true},"execution_count":34,"outputs":[{"execution_count":34,"output_type":"execute_result","data":{"text/plain":"Text(0, 0.5, 'M:M (FTIR)')"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"### Plot training data plot best fit line\nplt.scatter(X_test,y_test)\nplt.plot(X_test,regression.predict(X_test))\nplt.xlabel('HbA1c')\nplt.ylabel('M:M (FTIR)')","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:52:26.747853Z","iopub.execute_input":"2024-07-22T02:52:26.748497Z","iopub.status.idle":"2024-07-22T02:52:27.017938Z","shell.execute_reply.started":"2024-07-22T02:52:26.748447Z","shell.execute_reply":"2024-07-22T02:52:27.016705Z"},"trusted":true},"execution_count":35,"outputs":[{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"Text(0, 0.5, 'M:M (FTIR)')"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# Transform applying","metadata":{}},{"cell_type":"code","source":"'''# Custom function for reciprocal transformation\ndef reciprocal_transform(x):\n    return 1 / x\n\n# Create the transformer\ntrf = FunctionTransformer(func=reciprocal_transform)'''\n\n\n#Exponetial Transform\n#trf= FunctionTransformer(func=np.exp)  \n\n#Squareroot Transform\n#trf= FunctionTransformer(func=np.sqrt)  \n\n\n#Box-Cox Transform\ntrf = PowerTransformer(method='box-cox')\n\n\n#Log transform\n#trf= FunctionTransformer(func=np.log1p)  \nX_train_log_transformed= trf.fit_transform(X_train)\nX_test_log_transformed= trf.transform(X_test) \n\n#Box-Cox Transform\npd.DataFrame({'cols':X_train.columns,'box_cox_lambdas':trf.lambdas_})","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:52:27.019487Z","iopub.execute_input":"2024-07-22T02:52:27.019996Z","iopub.status.idle":"2024-07-22T02:52:27.043234Z","shell.execute_reply.started":"2024-07-22T02:52:27.019949Z","shell.execute_reply":"2024-07-22T02:52:27.041868Z"},"trusted":true},"execution_count":36,"outputs":[{"execution_count":36,"output_type":"execute_result","data":{"text/plain":"    cols  box_cox_lambdas\n0  HbA1c        -1.529836","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cols</th>\n      <th>box_cox_lambdas</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>HbA1c</td>\n      <td>-1.529836</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# Metrics After Transform","metadata":{}},{"cell_type":"code","source":"regression=LinearRegression(n_jobs=-1)\nregression.fit(X_train_log_transformed,y_train)\ny_train_pred=regression.predict(X_train_log_transformed)\ny_pred=regression.predict(X_test_log_transformed)\n\n### Performance metrics\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\n\n#Training errors\nmse=mean_squared_error(y_train, y_train_pred)\nmae=mean_absolute_error(y_train,y_train_pred)\nrmse=np.sqrt(mse)\nprint('mse train',mse)\nprint('mae train',mae)\nprint('rmse train',rmse)\n\n###R square Formula\n# R^2 = 1- ssr /sst\n# R^2 = coefficient of determination SSR = sum of squares of residuals SST = total sum of squares\nfrom sklearn.metrics import r2_score\nscore=r2_score(y_train,y_train_pred)\nprint('r2_score train',score)\n\n#Testing errors\nmse=mean_squared_error(y_test, y_pred)\nmae=mean_absolute_error(y_test,y_pred)\nrmse=np.sqrt(mse)\nprint('mse test',mse)\nprint('mae test',mae)\nprint('rmse test',rmse)\n\n###R square Formula\n# R^2 = 1- ssr /sst\n# R^2 = coefficient of determination SSR = sum of squares of residuals SST = total sum of squares\nfrom sklearn.metrics import r2_score\nscore=r2_score(y_test,y_pred)\nprint('r2_score test',score)\n\n### Adjusted R^2 = 1-[(1-R^2)*(n-1)/(n-k-1)]\n# where  R^2:The R^2 of model n: The number of observations  k: the number of predictor variables\n### Display adjusted R- squared\n1-(1-score)*(len(y_test)-1)/(len(y_test)-X_test.shape[1]-1)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:52:27.044648Z","iopub.execute_input":"2024-07-22T02:52:27.045133Z","iopub.status.idle":"2024-07-22T02:52:27.068086Z","shell.execute_reply.started":"2024-07-22T02:52:27.045094Z","shell.execute_reply":"2024-07-22T02:52:27.066853Z"},"trusted":true},"execution_count":37,"outputs":[{"name":"stdout","text":"mse train 2.036113610923021\nmae train 1.0926126196404502\nrmse train 1.4269245288111845\nr2_score train 0.018518914116904872\nmse test 1.8696815007515655\nmae test 1.1039184096970098\nrmse test 1.3673629732999082\nr2_score test -0.11560751716489914\n","output_type":"stream"},{"execution_count":37,"output_type":"execute_result","data":{"text/plain":"-0.19529376839096324"},"metadata":{}}]},{"cell_type":"markdown","source":"# Crossvalidation to check","metadata":{}},{"cell_type":"code","source":"X_transformed= trf.fit_transform(X)\nregression=LinearRegression(n_jobs=-1)\nprint('r2_score=',-(np.mean(cross_val_score(regression,X_transformed,y,scoring='r2',cv=3))))\n\nprint('Mean squared error',np.mean(cross_val_score(regression,X_transformed,y,scoring='neg_mean_squared_error',cv=5)))\n# Perform cross-validation\nscores = cross_validate(regression, X_transformed, y, cv=5, scoring='neg_mean_squared_error')\n\n# Print the mean squared error (negative because Scikit-Learn uses negated values)\nprint(f\"Mean squared error: {-scores['test_score'].mean():.4f}\")","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:52:27.069498Z","iopub.execute_input":"2024-07-22T02:52:27.069968Z","iopub.status.idle":"2024-07-22T02:52:27.122032Z","shell.execute_reply.started":"2024-07-22T02:52:27.069931Z","shell.execute_reply":"2024-07-22T02:52:27.120772Z"},"trusted":true},"execution_count":38,"outputs":[{"name":"stdout","text":"r2_score= 0.05615820942806001\nMean squared error -2.0910415253254806\nMean squared error: 2.0910\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Random_State values","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\n\n# Load your dataset\n#df = pd.read_csv(\"/path/to/your/dataset.csv\")\n\n# Independent and Dependent features\n#X = df[['HbA1c']]  # Replace with your actual feature column(s)\n#y = df['E-xLR']    # Replace with your actual target column\n\n# Function to evaluate the model performance\ndef evaluate_model(random_state):\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=random_state)\n    \n    # Applying Linear Regression\n    regression=LinearRegression(n_jobs=-1)\n    regression.fit(X_train_log_transformed,y_train)\n    y_pred=regression.predict(X_test_log_transformed)\n    \n    mse=mean_squared_error(y_test, y_pred)\n    r2=r2_score(y_test,y_pred)\n    \n    return mse, r2\n\n# Iterate over different random_state values\nresults = []\nfor random_state in range(100):\n    mse, score = evaluate_model(random_state)\n    results.append((random_state, mse, score))\n\n# Convert results to DataFrame\nresults_df = pd.DataFrame(results, columns=['random_state', 'mse', 'score'])\n\n# Find the best random_state values\nbest_random_states = results_df.nsmallest(5, 'mse')\n\nprint(\"Best random_state values based on MSE:\")\nprint(best_random_states)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:52:27.123407Z","iopub.execute_input":"2024-07-22T02:52:27.123754Z","iopub.status.idle":"2024-07-22T02:52:27.428197Z","shell.execute_reply.started":"2024-07-22T02:52:27.123723Z","shell.execute_reply":"2024-07-22T02:52:27.426857Z"},"trusted":true},"execution_count":39,"outputs":[{"name":"stdout","text":"Best random_state values based on MSE:\n    random_state       mse     score\n28            28  0.830484  0.236948\n70            70  0.922346 -0.206275\n99            99  0.993331  0.029992\n62            62  1.109279  0.037304\n53            53  1.127717 -0.143135\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Overfit and Underfit ","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\n\n# Function to evaluate model performance\ndef evaluate_model(random_state):\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=random_state)\n    \n    # Applying Linear Regression\n    regression=LinearRegression(n_jobs=-1)\n    regression.fit(X_train_log_transformed,y_train)\n    y_train_pred=regression.predict(X_train_log_transformed)\n    y_pred=regression.predict(X_test_log_transformed)\n    \n    mse_train=mean_squared_error(y_train, y_train_pred)\n    mse_test=mean_squared_error(y_test, y_pred)\n    r2_train=r2_score(y_train,y_train_pred)\n    r2_test=r2_score(y_test,y_pred)\n    \n    return random_state, mse_train, mse_test, r2_train, r2_test\n\n# Iterate over different random_state values\nresults = []\nfor random_state in range(100):\n    results.append(evaluate_model(random_state))\n\n# Convert results to DataFrame\nresults_df = pd.DataFrame(results, columns=['random_state', 'mse_train', 'mse_test', 'r2_train', 'r2_test'])\n\n# Find the best random_state values based on Test MSE\nbest_random_states = results_df.nsmallest(5, 'mse_test')\n\n# Print the training and testing MSE with respect to the best random_state values\nprint(\"Best random_state values based on Test MSE:\")\nfor index, row in best_random_states.iterrows():\n    print(f\"Random State: {row['random_state']}\")\n    print(f\"Training MSE: {row['mse_train']:.4f}, Testing MSE: {row['mse_test']:.4f}\")\n    print(f\"Training R2: {row['r2_train']:.4f}, Testing R2: {row['r2_test']:.4f}\")\n    print(\"---\")\n","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:52:27.430151Z","iopub.execute_input":"2024-07-22T02:52:27.430544Z","iopub.status.idle":"2024-07-22T02:52:27.825693Z","shell.execute_reply.started":"2024-07-22T02:52:27.430513Z","shell.execute_reply":"2024-07-22T02:52:27.824497Z"},"trusted":true},"execution_count":40,"outputs":[{"name":"stdout","text":"Best random_state values based on Test MSE:\nRandom State: 28.0\nTraining MSE: 2.2039, Testing MSE: 0.8305\nTraining R2: 0.0248, Testing R2: 0.2369\n---\nRandom State: 70.0\nTraining MSE: 2.2261, Testing MSE: 0.9223\nTraining R2: 0.0296, Testing R2: -0.2063\n---\nRandom State: 99.0\nTraining MSE: 2.2745, Testing MSE: 0.9933\nTraining R2: 0.0014, Testing R2: 0.0300\n---\nRandom State: 62.0\nTraining MSE: 2.0316, Testing MSE: 1.1093\nTraining R2: 0.0946, Testing R2: 0.0373\n---\nRandom State: 53.0\nTraining MSE: 2.2615, Testing MSE: 1.1277\nTraining R2: 0.0099, Testing R2: -0.1431\n---\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Box-Cox Checking Plot Before and After Tranfrormation ","metadata":{}},{"cell_type":"code","source":"'''X_train_log_transformed= pd.DataFrame(X_train_log_transformed,columns=X_train.columns)\nfor col in X_train_log_transformed.columns:\n    plt.figure(figsize=(14,4))\n    plt.subplot(121)\n    sns.distplot(X_train[col])\n    plt.title(col)\n    \n    plt.subplot(122)\n    sns.distplot(X_train_log_transformed[col])\n    plt.title(col)\n    \n    plt.show()'''","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:52:27.827303Z","iopub.execute_input":"2024-07-22T02:52:27.827686Z","iopub.status.idle":"2024-07-22T02:52:27.834964Z","shell.execute_reply.started":"2024-07-22T02:52:27.827651Z","shell.execute_reply":"2024-07-22T02:52:27.833718Z"},"trusted":true},"execution_count":41,"outputs":[{"execution_count":41,"output_type":"execute_result","data":{"text/plain":"'X_train_log_transformed= pd.DataFrame(X_train_log_transformed,columns=X_train.columns)\\nfor col in X_train_log_transformed.columns:\\n    plt.figure(figsize=(14,4))\\n    plt.subplot(121)\\n    sns.distplot(X_train[col])\\n    plt.title(col)\\n    \\n    plt.subplot(122)\\n    sns.distplot(X_train_log_transformed[col])\\n    plt.title(col)\\n    \\n    plt.show()'"},"metadata":{}}]},{"cell_type":"markdown","source":"# Checking Plot Before and After Tranfrormation ","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize=(10,3))\nplt.subplot(121)\nsns.distplot(X_train['HbA1c'])\nplt.title('HbA1c PDF')\n\nplt.figure(figsize=(14,4))\nplt.subplot(121)\nsns.distplot(X_train_log_transformed['HbA1c'])\nplt.title('HbA1c PDF')\n\nplt.figure(figsize=(14,4))\n\nplt.subplot(121)\nstats.probplot(X_train['HbA1c'], dist=\"norm\", plot=plt)\nplt.title('HbA1c Before ')\n\nplt.subplot(122)\nstats.probplot(X_train_log_transformed['HbA1c'], dist=\"norm\", plot=plt)\nplt.title('HbA1c After ')","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:52:27.836902Z","iopub.execute_input":"2024-07-22T02:52:27.837519Z","iopub.status.idle":"2024-07-22T02:52:28.423142Z","shell.execute_reply.started":"2024-07-22T02:52:27.837480Z","shell.execute_reply":"2024-07-22T02:52:28.420047Z"},"trusted":true},"execution_count":42,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_33/3107429556.py:3: UserWarning: \n\n`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n\nPlease adapt your code to use either `displot` (a figure-level function with\nsimilar flexibility) or `histplot` (an axes-level function for histograms).\n\nFor a guide to updating your code to use the new functions, please see\nhttps://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n\n  sns.distplot(X_train['HbA1c'])\n/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","Cell \u001b[0;32mIn[42], line 8\u001b[0m\n\u001b[1;32m      6\u001b[0m plt\u001b[38;5;241m.\u001b[39mfigure(figsize\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m14\u001b[39m,\u001b[38;5;241m4\u001b[39m))\n\u001b[1;32m      7\u001b[0m plt\u001b[38;5;241m.\u001b[39msubplot(\u001b[38;5;241m121\u001b[39m)\n\u001b[0;32m----> 8\u001b[0m sns\u001b[38;5;241m.\u001b[39mdistplot(\u001b[43mX_train_log_transformed\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mHbA1c\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m)\n\u001b[1;32m      9\u001b[0m plt\u001b[38;5;241m.\u001b[39mtitle(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mHbA1c PDF\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m     11\u001b[0m plt\u001b[38;5;241m.\u001b[39mfigure(figsize\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m14\u001b[39m,\u001b[38;5;241m4\u001b[39m))\n","\u001b[0;31mIndexError\u001b[0m: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices"],"ename":"IndexError","evalue":"only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices","output_type":"error"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x300 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1400x400 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# Ridge Regression ","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import Ridge\nfrom sklearn.model_selection import GridSearchCV\nridge_regressor=Ridge()\n\nparameters={'alpha':[1e-15,1e-10,1e-8,1e-3,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100]}\nridgecv=GridSearchCV(ridge_regressor,parameters,scoring='neg_mean_squared_error',cv=5)\nridgecv.fit(X_train,y_train)\n\nprint(ridgecv.best_params_)\nprint(-(ridgecv.best_score_))\n\nridge_pred=ridgecv.predict(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:52:28.424964Z","iopub.status.idle":"2024-07-22T02:52:28.425410Z","shell.execute_reply.started":"2024-07-22T02:52:28.425205Z","shell.execute_reply":"2024-07-22T02:52:28.425223Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Metrics of Test set of Ridge","metadata":{}},{"cell_type":"code","source":"#y_pred=regression.predict(X_test_log_transformed)\nridge_pred=ridgecv.predict(X_test)\nridge_train_pred=ridgecv.predict(X_train)\n### Performance metrics\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\n\n#Training error\nmse=mean_squared_error(y_train, ridge_train_pred)\nmae=mean_absolute_error(y_train,ridge_train_pred)\nrmse=np.sqrt(mse)\nprint('mse train',mse)\nprint('mae train',mae)\nprint('rmse train',rmse)\n\n###R square Formula\n# R^2 = 1- ssr /sst\n# R^2 = coefficient of determination SSR = sum of squares of residuals SST = total sum of squares\nfrom sklearn.metrics import r2_score\nscore=r2_score(y_train,ridge_train_pred)\nprint('r2_score_train',score)\n\n\n#Testing error\nmse=mean_squared_error(y_test, ridge_pred)\nmae=mean_absolute_error(y_test,ridge_pred)\nrmse=np.sqrt(mse)\nprint('mse test',mse)\nprint('mae test',mae)\nprint('rmse test',rmse)\n\n###R square Formula\n# R^2 = 1- ssr /sst\n# R^2 = coefficient of determination SSR = sum of squares of residuals SST = total sum of squares\nfrom sklearn.metrics import r2_score\nscore=r2_score(y_test,ridge_pred)\nprint('r2_score_test',score)\n\n### Adjusted R^2 = 1-[(1-R^2)*(n-1)/(n-k-1)]\n# where  R^2:The R^2 of model n: The number of observations  k: the number of predictor variables\n### Display adjusted R- squared\n1-(1-score)*(len(y_test)-1)/(len(y_test)-X_test.shape[1]-1)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:52:28.427469Z","iopub.status.idle":"2024-07-22T02:52:28.428108Z","shell.execute_reply.started":"2024-07-22T02:52:28.427791Z","shell.execute_reply":"2024-07-22T02:52:28.427818Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Random_State values","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import mean_squared_error, r2_score\n\n# Function to evaluate model performance\ndef evaluate_model(random_state):\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=random_state)\n    \n    # Applying Linear Regression\n    ridge_regressor=Ridge()\n    ridgecv.fit(X_train,y_train)\n    ridge_pred=ridgecv.predict(X_test)\n    ridge_train_pred=ridgecv.predict(X_train)\n    \n    mse_train = mean_squared_error(y_train, ridge_train_pred)\n    mse_test = mean_squared_error(y_test, ridge_pred)\n    r2_train = r2_score(y_train, ridge_train_pred)\n    r2_test = r2_score(y_test, ridge_pred)\n    \n    return random_state, mse_train, mse_test, r2_train, r2_test\n\n# Iterate over different random_state values\nresults = []\nfor random_state in range(100):\n    results.append(evaluate_model(random_state))\n\n# Convert results to DataFrame\nresults_df = pd.DataFrame(results, columns=['random_state', 'mse_train', 'mse_test', 'r2_train', 'r2_test'])\n\n# Find the best random_state values based on Test MSE\nbest_random_states = results_df.nsmallest(50, 'mse_test')\n\n# Print the training and testing MSE with respect to the best random_state values\nprint(\"Best random_state values based on Test MSE:\")\nfor index, row in best_random_states.iterrows():\n    print(f\"Random State: {row['random_state']}\")\n    print(f\"Training MSE: {row['mse_train']:.4f}, Testing MSE: {row['mse_test']:.4f}\")\n    print(f\"Training R2: {row['r2_train']:.4f}, Testing R2: {row['r2_test']:.4f}\")\n    print(\"---\")\n","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:52:28.429333Z","iopub.status.idle":"2024-07-22T02:52:28.429916Z","shell.execute_reply.started":"2024-07-22T02:52:28.429620Z","shell.execute_reply":"2024-07-22T02:52:28.429643Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Lasso Regression","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import Lasso\nfrom sklearn.model_selection import GridSearchCV\n\nLasso=Lasso()\nparameters={'alpha':[1e-15,1e-10,1e-8,1e-3,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100]}\nLassocv=GridSearchCV(Lasso,parameters,scoring='neg_mean_squared_error',cv=5)\nLassocv.fit(X_train,y_train)\n\nprint(Lassocv.best_params_)\nprint((-Lassocv.best_score_))\n\nLasso_pred=Lassocv.predict(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:52:28.431888Z","iopub.status.idle":"2024-07-22T02:52:28.432437Z","shell.execute_reply.started":"2024-07-22T02:52:28.432196Z","shell.execute_reply":"2024-07-22T02:52:28.432224Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Metrics of Test set Lasso","metadata":{}},{"cell_type":"code","source":"#y_pred=regression.predict(X_test_log_transformed)\nLasso_pred=Lassocv.predict(X_test)\nLasso_train_pred=Lassocv.predict(X_train)\n### Performance metrics\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\n\n#Training error\nmse=mean_squared_error(y_train, Lasso_train_pred)\nmae=mean_absolute_error(y_train,Lasso_train_pred)\nrmse=np.sqrt(mse)\nprint('mse train',mse)\nprint('mae train',mae)\nprint('rmse train',rmse)\n\n###R square Formula\n# R^2 = 1- ssr /sst\n# R^2 = coefficient of determination SSR = sum of squares of residuals SST = total sum of squares\nfrom sklearn.metrics import r2_score\nscore=r2_score(y_train,Lasso_train_pred)\nprint('r2_score_train',score)\n\n\n#Testing error\nmse=mean_squared_error(y_test, Lasso_pred)\nmae=mean_absolute_error(y_test,Lasso_pred)\nrmse=np.sqrt(mse)\nprint('mse test',mse)\nprint('mae test',mae)\nprint('rmse test',rmse)\n\n###R square Formula\n# R^2 = 1- ssr /sst\n# R^2 = coefficient of determination SSR = sum of squares of residuals SST = total sum of squares\nfrom sklearn.metrics import r2_score\nscore=r2_score(y_test,Lasso_pred)\nprint('r2_score_test',score)\n\n### Adjusted R^2 = 1-[(1-R^2)*(n-1)/(n-k-1)]\n# where  R^2:The R^2 of model n: The number of observations  k: the number of predictor variables\n### Display adjusted R- squared\n1-(1-score)*(len(y_test)-1)/(len(y_test)-X_test.shape[1]-1)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:52:28.434242Z","iopub.status.idle":"2024-07-22T02:52:28.434882Z","shell.execute_reply.started":"2024-07-22T02:52:28.434565Z","shell.execute_reply":"2024-07-22T02:52:28.434589Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Random_State values ","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Lasso\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import mean_squared_error, r2_score\n\n\n# Function to evaluate model performance\ndef evaluate_model(random_state):\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=random_state)\n    \n    # Applying Linear Regression\n    Lasso=Lasso()\n    Lassocv.fit(X_train,y_train)\n    Lasso_train_pred=Lassocv.predict(X_train)\n    Lasso_pred=Lassocv.predict(X_test)\n    \n    mse_train = mean_squared_error(y_train, Lasso_train_pred)\n    mse_test = mean_squared_error(y_test, Lasso_pred)\n    r2_train = r2_score(y_train, Lasso_train_pred)\n    r2_test = r2_score(y_test, Lasso_pred)\n    \n    return random_state, mse_train, mse_test, r2_train, r2_test\n\n# Iterate over different random_state values\nresults = []\nfor random_state in range(100):\n    results.append(evaluate_model(random_state))\n\n# Convert results to DataFrame\nresults_df = pd.DataFrame(results, columns=['random_state', 'mse_train', 'mse_test', 'r2_train', 'r2_test'])\n\n# Find the best random_state values based on Test MSE\nbest_random_states = results_df.nsmallest(50, 'mse_test')\n\n# Print the training and testing MSE with respect to the best random_state values\nprint(\"Best random_state values based on Test MSE:\")\nfor index, row in best_random_states.iterrows():\n    print(f\"Random State: {row['random_state']}\")\n    print(f\"Training MSE: {row['mse_train']:.4f}, Testing MSE: {row['mse_test']:.4f}\")\n    print(f\"Training R2: {row['r2_train']:.4f}, Testing R2: {row['r2_test']:.4f}\")\n    print(\"---\")\n","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:52:28.436747Z","iopub.status.idle":"2024-07-22T02:52:28.437353Z","shell.execute_reply.started":"2024-07-22T02:52:28.437059Z","shell.execute_reply":"2024-07-22T02:52:28.437085Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# POLYNOMIAL","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression,SGDRegressor\nfrom sklearn.preprocessing import PolynomialFeatures,StandardScaler\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.metrics import r2_score\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.preprocessing import FunctionTransformer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import PowerTransformer\n%matplotlib inline","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:52:37.574440Z","iopub.execute_input":"2024-07-22T02:52:37.574898Z","iopub.status.idle":"2024-07-22T02:52:37.585618Z","shell.execute_reply.started":"2024-07-22T02:52:37.574861Z","shell.execute_reply":"2024-07-22T02:52:37.584369Z"},"trusted":true},"execution_count":43,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/m-m-ftir/M_M (FTIR) DATA - Sheet1.csv')\n### Independent and Dependent features\nX= df[['HbA1c']] ### Independent feaure should be data frame or 2D array.\ny=df['M:M (FTIR)'] ### This variable can be serier or 1D array\n### Train Test Split\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test= train_test_split(X,y,test_size=0.20,random_state=42)\n\n#Applying Linear Regression\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\n\nlr=LinearRegression()\nlr.fit(X_train,y_train)\ny_pred=lr.predict(X_test)\n\n#Applying Polynomial Regession \n#degree2\n\npoly = PolynomialFeatures(degree=8)\n\nX_poly = poly.fit_transform(X_train)\n\nL1=LinearRegression()\nL1.fit(X_poly,y_train)\n\nX_test_poly = poly.transform(X_test) #Also try transform itself neither fit_transform\ny_pred=L1.predict(X_test_poly)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:52:40.733132Z","iopub.execute_input":"2024-07-22T02:52:40.733914Z","iopub.status.idle":"2024-07-22T02:52:40.761247Z","shell.execute_reply.started":"2024-07-22T02:52:40.733878Z","shell.execute_reply":"2024-07-22T02:52:40.760050Z"},"trusted":true},"execution_count":44,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.pipeline import Pipeline\nimport matplotlib.pyplot as plt\n\n# Load data\ndf = pd.read_csv('/kaggle/input/m-m-ftir/M_M (FTIR) DATA - Sheet1.csv')\n\n# Independent and Dependent features\nX = df[['HbA1c']]  # Independent feature should be data frame or 2D array.\ny = df['M:M (FTIR)']  # This variable can be series or 1D array\n\n# Train Test Split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=44)\n\n# Create a pipeline with PolynomialFeatures and LinearRegression\npipeline = Pipeline([\n    ('poly', PolynomialFeatures()),\n    ('linear', LinearRegression())\n])\n\n# Define the parameter grid for hyperparameter tuning\nparam_grid = {\n    'poly__degree': [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]\n}\n\n# Create a GridSearchCV object\ngrid_search = GridSearchCV(pipeline, param_grid, cv=5, scoring='neg_mean_squared_error')\n\n# Fit the model\ngrid_search.fit(X_train, y_train)\n\n# Get the best parameters\nbest_params = grid_search.best_params_\nprint(\"Best parameters found: \", best_params)\n\n# Predict with the best model\nbest_model = grid_search.best_estimator_\ny_pred = best_model.predict(X_test)\n\n# Evaluate the model\nmse = mean_squared_error(y_test, y_pred)\nmae = mean_absolute_error(y_test, y_pred)\nrmse = np.sqrt(mse)\nr2 = -(r2_score(y_test, y_pred))\n\nprint(\"MSE: \", mse)\nprint(\"MAE: \", mae)\nprint(\"RMSE: \", rmse)\nprint('R2_score: ', r2)\n\n# Plot the results\nplt.plot(X_test, y_pred, label='Model', color='red')\nplt.scatter(X_train, y_train, label='Data', marker='+', color='green')\nplt.legend()\nplt.xlabel(\"HbA1c\")\nplt.ylabel(\"M:M (FTIR)\")\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:52:44.276442Z","iopub.execute_input":"2024-07-22T02:52:44.276848Z","iopub.status.idle":"2024-07-22T02:52:46.215541Z","shell.execute_reply.started":"2024-07-22T02:52:44.276817Z","shell.execute_reply":"2024-07-22T02:52:46.214380Z"},"trusted":true},"execution_count":45,"outputs":[{"name":"stdout","text":"Best parameters found:  {'poly__degree': 4}\nMSE:  3.18583682562947\nMAE:  1.493359235176651\nRMSE:  1.7848912643714379\nR2_score:  0.6602966222220183\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# Predict with the best model\nbest_model = grid_search.best_estimator_\ny_train_pred = best_model.predict(X_train)\ny_test_pred = best_model.predict(X_test)\n\n# Evaluate the model on the training set\ntrain_mse = mean_squared_error(y_train, y_train_pred)\ntrain_mae = mean_absolute_error(y_train, y_train_pred)\ntrain_rmse = np.sqrt(train_mse)\ntrain_r2 = r2_score(y_train, y_train_pred)\n\nprint(\"Training MSE: \", train_mse)\nprint(\"Training MAE: \", train_mae)\nprint(\"Training RMSE: \", train_rmse)\nprint('Training R2_score: ', train_r2)\n\n# Evaluate the model on the testing set\ntest_mse = mean_squared_error(y_test, y_test_pred)\ntest_mae = mean_absolute_error(y_test, y_test_pred)\ntest_rmse = np.sqrt(test_mse)\ntest_r2 = r2_score(y_test, y_test_pred)\n\n\n# Plot the results\nplt.figure(figsize=(6, 5))\nplt.scatter(X_train, y_train, label='Training Data', color='green', marker='+')\nplt.plot(X_train, y_train_pred, label='Model (Training)', color='red', linewidth=2)\n\nplt.legend()\nplt.xlabel(\"HbA1c\")\nplt.ylabel(\"M:M (FTIR)\")\nplt.title(\"Polynomial Regression Model\")\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:52:28.446456Z","iopub.status.idle":"2024-07-22T02:52:28.446968Z","shell.execute_reply.started":"2024-07-22T02:52:28.446685Z","shell.execute_reply":"2024-07-22T02:52:28.446705Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Testing MSE: \", test_mse)\nprint(\"Testing MAE: \", test_mae)\nprint(\"Testing RMSE: \", test_rmse)\nprint('Testing R2_score: ', test_r2)\n\nplt.scatter(X_test, y_test, label='Testing Data', color='blue', marker='x')\nplt.plot(X_test, y_test_pred, label='Model (Testing)', color='orange', linewidth=2, linestyle='--')\nplt.legend()\nplt.xlabel(\"HbA1c\")\nplt.ylabel(\"M:M (FTIR)\")\nplt.title(\"Polynomial Regression Model\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:52:28.448858Z","iopub.status.idle":"2024-07-22T02:52:28.449286Z","shell.execute_reply.started":"2024-07-22T02:52:28.449094Z","shell.execute_reply":"2024-07-22T02:52:28.449112Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Random Values","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\n\n\n# Function to evaluate polynomial regression model performance\ndef evaluate_model(random_state, degree):\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=random_state)\n    \n    # Applying Polynomial Features\n    poly = PolynomialFeatures(degree=degree)\n    X_train_poly = poly.fit_transform(X_train)\n    X_test_poly = poly.transform(X_test)\n    \n    # Applying Linear Regression on Polynomial Features\n    lr = LinearRegression()\n    lr.fit(X_train_poly, y_train)\n    y_pred_train = lr.predict(X_train_poly)\n    y_pred_test = lr.predict(X_test_poly)\n    \n    mse_train = mean_squared_error(y_train, y_pred_train)\n    mse_test = mean_squared_error(y_test, y_pred_test)\n    r2_train = r2_score(y_train, y_pred_train)\n    r2_test = r2_score(y_test, y_pred_test)\n    \n    return random_state, degree, mse_train, mse_test, r2_train, r2_test\n\n# Iterate over different random_state and degree values\nresults = []\ndegrees = [2,3,4,5,6,7,8]\n  # List of degrees to try\nfor random_state in range(300):\n    for degree in degrees:\n        results.append(evaluate_model(random_state, degree))\n\n# Convert results to DataFrame\nresults_df = pd.DataFrame(results, columns=['random_state', 'degree', 'mse_train', 'mse_test', 'r2_train', 'r2_test'])\n\n# Find the best random_state and degree values based on Test MSE\nbest_results = results_df.nsmallest(50, 'mse_test')\n\n# Print the training and testing MSE with respect to the best random_state and degree values\nprint(\"Best random_state and degree values based on Test MSE:\")\nfor index, row in best_results.iterrows():\n    print(f\"Random State: {row['random_state']}, Degree: {row['degree']}\")\n    print(f\"Training MSE: {row['mse_train']:.4f}, Testing MSE: {row['mse_test']:.4f}\")\n    print(f\"Training R2: {row['r2_train']:.4f}, Testing R2: {row['r2_test']:.4f}\")\n    print(\"---\")\n","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:53:55.784361Z","iopub.execute_input":"2024-07-22T02:53:55.784784Z","iopub.status.idle":"2024-07-22T02:54:11.247495Z","shell.execute_reply.started":"2024-07-22T02:53:55.784730Z","shell.execute_reply":"2024-07-22T02:54:11.246126Z"},"trusted":true},"execution_count":47,"outputs":[{"name":"stdout","text":"Best random_state and degree values based on Test MSE:\nRandom State: 125.0, Degree: 7.0\nTraining MSE: 2.2472, Testing MSE: 0.6182\nTraining R2: 0.0423, Testing R2: 0.1441\n---\nRandom State: 125.0, Degree: 6.0\nTraining MSE: 2.2513, Testing MSE: 0.6678\nTraining R2: 0.0406, Testing R2: 0.0754\n---\nRandom State: 125.0, Degree: 8.0\nTraining MSE: 2.2382, Testing MSE: 0.6984\nTraining R2: 0.0462, Testing R2: 0.0331\n---\nRandom State: 194.0, Degree: 6.0\nTraining MSE: 2.2355, Testing MSE: 0.7070\nTraining R2: 0.0518, Testing R2: 0.0116\n---\nRandom State: 125.0, Degree: 5.0\nTraining MSE: 2.2589, Testing MSE: 0.7098\nTraining R2: 0.0374, Testing R2: 0.0174\n---\nRandom State: 194.0, Degree: 4.0\nTraining MSE: 2.2663, Testing MSE: 0.7161\nTraining R2: 0.0387, Testing R2: -0.0011\n---\nRandom State: 125.0, Degree: 4.0\nTraining MSE: 2.2651, Testing MSE: 0.7371\nTraining R2: 0.0347, Testing R2: -0.0205\n---\nRandom State: 194.0, Degree: 5.0\nTraining MSE: 2.2509, Testing MSE: 0.7399\nTraining R2: 0.0452, Testing R2: -0.0343\n---\nRandom State: 212.0, Degree: 7.0\nTraining MSE: 2.2082, Testing MSE: 0.7470\nTraining R2: 0.0450, Testing R2: 0.1239\n---\nRandom State: 194.0, Degree: 3.0\nTraining MSE: 2.2957, Testing MSE: 0.7649\nTraining R2: 0.0262, Testing R2: -0.0693\n---\nRandom State: 125.0, Degree: 2.0\nTraining MSE: 2.3039, Testing MSE: 0.7657\nTraining R2: 0.0182, Testing R2: -0.0600\n---\nRandom State: 212.0, Degree: 6.0\nTraining MSE: 2.2189, Testing MSE: 0.7830\nTraining R2: 0.0404, Testing R2: 0.0817\n---\nRandom State: 125.0, Degree: 3.0\nTraining MSE: 2.2856, Testing MSE: 0.7975\nTraining R2: 0.0260, Testing R2: -0.1041\n---\nRandom State: 194.0, Degree: 2.0\nTraining MSE: 2.3003, Testing MSE: 0.7986\nTraining R2: 0.0243, Testing R2: -0.1165\n---\nRandom State: 194.0, Degree: 7.0\nTraining MSE: 2.2069, Testing MSE: 0.8121\nTraining R2: 0.0639, Testing R2: -0.1354\n---\nRandom State: 212.0, Degree: 5.0\nTraining MSE: 2.2304, Testing MSE: 0.8249\nTraining R2: 0.0355, Testing R2: 0.0325\n---\nRandom State: 153.0, Degree: 7.0\nTraining MSE: 2.1917, Testing MSE: 0.8530\nTraining R2: 0.0505, Testing R2: -0.1613\n---\nRandom State: 212.0, Degree: 3.0\nTraining MSE: 2.2715, Testing MSE: 0.8550\nTraining R2: 0.0177, Testing R2: -0.0028\n---\nRandom State: 212.0, Degree: 4.0\nTraining MSE: 2.2385, Testing MSE: 0.8552\nTraining R2: 0.0320, Testing R2: -0.0030\n---\nRandom State: 212.0, Degree: 8.0\nTraining MSE: 2.2008, Testing MSE: 0.8579\nTraining R2: 0.0482, Testing R2: -0.0062\n---\nRandom State: 212.0, Degree: 2.0\nTraining MSE: 2.2822, Testing MSE: 0.8670\nTraining R2: 0.0131, Testing R2: -0.0169\n---\nRandom State: 153.0, Degree: 6.0\nTraining MSE: 2.2055, Testing MSE: 0.8725\nTraining R2: 0.0445, Testing R2: -0.1879\n---\nRandom State: 194.0, Degree: 8.0\nTraining MSE: 2.1971, Testing MSE: 0.8832\nTraining R2: 0.0680, Testing R2: -0.2347\n---\nRandom State: 276.0, Degree: 3.0\nTraining MSE: 2.2533, Testing MSE: 0.9024\nTraining R2: 0.0203, Testing R2: 0.0382\n---\nRandom State: 153.0, Degree: 5.0\nTraining MSE: 2.2169, Testing MSE: 0.9113\nTraining R2: 0.0395, Testing R2: -0.2407\n---\nRandom State: 276.0, Degree: 2.0\nTraining MSE: 2.2626, Testing MSE: 0.9155\nTraining R2: 0.0163, Testing R2: 0.0242\n---\nRandom State: 153.0, Degree: 2.0\nTraining MSE: 2.2746, Testing MSE: 0.9329\nTraining R2: 0.0146, Testing R2: -0.2701\n---\nRandom State: 153.0, Degree: 3.0\nTraining MSE: 2.2595, Testing MSE: 0.9369\nTraining R2: 0.0211, Testing R2: -0.2756\n---\nRandom State: 153.0, Degree: 4.0\nTraining MSE: 2.2243, Testing MSE: 0.9443\nTraining R2: 0.0363, Testing R2: -0.2856\n---\nRandom State: 190.0, Degree: 8.0\nTraining MSE: 2.1506, Testing MSE: 0.9499\nTraining R2: 0.0451, Testing R2: 0.1500\n---\nRandom State: 216.0, Degree: 2.0\nTraining MSE: 2.2555, Testing MSE: 0.9505\nTraining R2: 0.0187, Testing R2: -0.0412\n---\nRandom State: 190.0, Degree: 7.0\nTraining MSE: 2.1533, Testing MSE: 0.9514\nTraining R2: 0.0439, Testing R2: 0.1487\n---\nRandom State: 226.0, Degree: 7.0\nTraining MSE: 2.1578, Testing MSE: 0.9558\nTraining R2: 0.0453, Testing R2: 0.1188\n---\nRandom State: 28.0, Degree: 8.0\nTraining MSE: 2.1558, Testing MSE: 0.9578\nTraining R2: 0.0461, Testing R2: 0.1200\n---\nRandom State: 226.0, Degree: 8.0\nTraining MSE: 2.1576, Testing MSE: 0.9648\nTraining R2: 0.0454, Testing R2: 0.1106\n---\nRandom State: 28.0, Degree: 7.0\nTraining MSE: 2.1560, Testing MSE: 0.9713\nTraining R2: 0.0460, Testing R2: 0.1076\n---\nRandom State: 153.0, Degree: 8.0\nTraining MSE: 2.1852, Testing MSE: 0.9723\nTraining R2: 0.0533, Testing R2: -0.3238\n---\nRandom State: 216.0, Degree: 3.0\nTraining MSE: 2.2396, Testing MSE: 0.9744\nTraining R2: 0.0256, Testing R2: -0.0673\n---\nRandom State: 28.0, Degree: 6.0\nTraining MSE: 2.1682, Testing MSE: 0.9774\nTraining R2: 0.0406, Testing R2: 0.1019\n---\nRandom State: 226.0, Degree: 6.0\nTraining MSE: 2.1699, Testing MSE: 0.9844\nTraining R2: 0.0399, Testing R2: 0.0925\n---\nRandom State: 190.0, Degree: 6.0\nTraining MSE: 2.1632, Testing MSE: 0.9903\nTraining R2: 0.0395, Testing R2: 0.1140\n---\nRandom State: 216.0, Degree: 4.0\nTraining MSE: 2.1977, Testing MSE: 0.9969\nTraining R2: 0.0439, Testing R2: -0.0920\n---\nRandom State: 28.0, Degree: 5.0\nTraining MSE: 2.1813, Testing MSE: 1.0053\nTraining R2: 0.0348, Testing R2: 0.0763\n---\nRandom State: 190.0, Degree: 5.0\nTraining MSE: 2.1791, Testing MSE: 1.0056\nTraining R2: 0.0325, Testing R2: 0.1003\n---\nRandom State: 70.0, Degree: 3.0\nTraining MSE: 2.2440, Testing MSE: 1.0067\nTraining R2: 0.0218, Testing R2: -0.3167\n---\nRandom State: 226.0, Degree: 4.0\nTraining MSE: 2.1907, Testing MSE: 1.0068\nTraining R2: 0.0307, Testing R2: 0.0718\n---\nRandom State: 216.0, Degree: 6.0\nTraining MSE: 2.1623, Testing MSE: 1.0114\nTraining R2: 0.0593, Testing R2: -0.1079\n---\nRandom State: 276.0, Degree: 5.0\nTraining MSE: 2.1988, Testing MSE: 1.0204\nTraining R2: 0.0441, Testing R2: -0.0876\n---\nRandom State: 216.0, Degree: 5.0\nTraining MSE: 2.1800, Testing MSE: 1.0215\nTraining R2: 0.0516, Testing R2: -0.1189\n---\nRandom State: 226.0, Degree: 5.0\nTraining MSE: 2.1735, Testing MSE: 1.0250\nTraining R2: 0.0383, Testing R2: 0.0550\n---\n","output_type":"stream"}]},{"cell_type":"code","source":"### Prediction of test data\n###1. prediction M_M (FTIR) output = intercept + coef_(HbA1c)\n###2. y_pred_test = 20.76923076923077 + -1.23094616 (X_test)\n### Prediction for the test data\ny_pred=regression.predict(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:52:28.453278Z","iopub.status.idle":"2024-07-22T02:52:28.453914Z","shell.execute_reply.started":"2024-07-22T02:52:28.453661Z","shell.execute_reply":"2024-07-22T02:52:28.453686Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"### Performance metrics\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\n\nmse=mean_squared_error(y_test, y_pred)\nmae=mean_absolute_error(y_test,y_pred)\nrmse=np.sqrt(mse)\nprint(mse)\nprint(mae)\nprint(rmse)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:52:28.455842Z","iopub.status.idle":"2024-07-22T02:52:28.456267Z","shell.execute_reply.started":"2024-07-22T02:52:28.456073Z","shell.execute_reply":"2024-07-22T02:52:28.456092Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"###R square Formula\n# R^2 = 1- ssr /sst\n# R^2 = coefficient of determination SSR = sum of squares of residuals SST = total sum of squares\nfrom sklearn.metrics import r2_score\n\nscore=r2_score(y_test,y_pred)\nprint(score)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:52:28.457540Z","iopub.status.idle":"2024-07-22T02:52:28.457948Z","shell.execute_reply.started":"2024-07-22T02:52:28.457739Z","shell.execute_reply":"2024-07-22T02:52:28.457778Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"### Adjusted R^2 = 1-[(1-R^2)*(n-1)/(n-k-1)]\n# where  R^2:The R^2 of model n: The number of observations  k: the number of predictor variables\n\n### Display adjusted R- squared\n1-(1-score)*(len(y_test)-1)/(len(y_test)-X_test.shape[1]-1)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:52:28.459713Z","iopub.status.idle":"2024-07-22T02:52:28.460140Z","shell.execute_reply.started":"2024-07-22T02:52:28.459948Z","shell.execute_reply":"2024-07-22T02:52:28.459965Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#from sklearn.linear_model import LinearRegression\n# Make predictions on new data\n#new_data = np.array([[7]]) # Replace with the actual value you want to predict on\n#predictions = regression.predict(new_data)\n#print(\"Predictions:\", predictions)\n\n### Prediction new data\n#regression.predict(scaler.transform([[6.8]]))","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:52:28.461850Z","iopub.status.idle":"2024-07-22T02:52:28.462405Z","shell.execute_reply.started":"2024-07-22T02:52:28.462120Z","shell.execute_reply":"2024-07-22T02:52:28.462144Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Hyperparameter Tuning ","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import LinearRegression\n\ndf = pd.read_csv('/kaggle/input/m-m-ftir/M_M (FTIR) DATA - Sheet1.csv')\n\n### Independent and Dependent features\nX= df[['HbA1c']] ### Independent feaure should be data frame or 2D array.\ny=df['M:M (FTIR)'] ### This variable can be serier or 1D array\n\n### Train Test Split\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test= train_test_split(X,y,test_size=0.25,random_state=42)\n\nparameters= {\n        'fit_intercept': [True, False],\n    'copy_X': [True, False],\n    'n_jobs':[-1,1],\n    'positive': [True, False]\n}\n\n###LinearRegression \nmodel = LinearRegression()\ngrid_search = GridSearchCV(model, parameters, cv=5)  # 5-fold cross-validation\ngrid_search.fit(X, y)\nbest_params = grid_search.best_params_\nprint(\"Best hyperparameters:\", best_params)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:52:28.464237Z","iopub.status.idle":"2024-07-22T02:52:28.464825Z","shell.execute_reply.started":"2024-07-22T02:52:28.464518Z","shell.execute_reply":"2024-07-22T02:52:28.464544Z"},"trusted":true},"execution_count":null,"outputs":[]}]}