{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8828401,"sourceType":"datasetVersion","datasetId":5311642}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-22T02:12:47.190326Z","iopub.execute_input":"2024-07-22T02:12:47.190720Z","iopub.status.idle":"2024-07-22T02:12:47.199474Z","shell.execute_reply.started":"2024-07-22T02:12:47.190689Z","shell.execute_reply":"2024-07-22T02:12:47.198369Z"},"trusted":true},"execution_count":25,"outputs":[{"name":"stdout","text":"/kaggle/input/bv-tv/BV_TV DATA - Sheet1.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression,SGDRegressor\nfrom sklearn.preprocessing import PolynomialFeatures,StandardScaler\nfrom sklearn.metrics import r2_score\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.preprocessing import FunctionTransformer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import PowerTransformer\n%matplotlib inline","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:12:47.201548Z","iopub.execute_input":"2024-07-22T02:12:47.201913Z","iopub.status.idle":"2024-07-22T02:12:47.211644Z","shell.execute_reply.started":"2024-07-22T02:12:47.201875Z","shell.execute_reply":"2024-07-22T02:12:47.210418Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/bv-tv/BV_TV DATA - Sheet1.csv')","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:12:47.212895Z","iopub.execute_input":"2024-07-22T02:12:47.213222Z","iopub.status.idle":"2024-07-22T02:12:47.230411Z","shell.execute_reply.started":"2024-07-22T02:12:47.213195Z","shell.execute_reply":"2024-07-22T02:12:47.229334Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:12:47.232441Z","iopub.execute_input":"2024-07-22T02:12:47.232851Z","iopub.status.idle":"2024-07-22T02:12:47.244799Z","shell.execute_reply.started":"2024-07-22T02:12:47.232814Z","shell.execute_reply":"2024-07-22T02:12:47.243640Z"},"trusted":true},"execution_count":28,"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"   HbA1c  BV/TV\n0    4.2  19.70\n1    4.3  20.00\n2    4.6  27.60\n3    4.6  20.68\n4    4.7  20.68","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>HbA1c</th>\n      <th>BV/TV</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>4.2</td>\n      <td>19.70</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4.3</td>\n      <td>20.00</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4.6</td>\n      <td>27.60</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4.6</td>\n      <td>20.68</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4.7</td>\n      <td>20.68</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"### scatter plot\nplt.scatter(df['HbA1c'],df['BV/TV'])\nplt.xlabel(\"HbA1c\")\nplt.ylabel(\"BV/TV\")","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:12:47.247022Z","iopub.execute_input":"2024-07-22T02:12:47.247423Z","iopub.status.idle":"2024-07-22T02:12:47.507305Z","shell.execute_reply.started":"2024-07-22T02:12:47.247394Z","shell.execute_reply":"2024-07-22T02:12:47.506004Z"},"trusted":true},"execution_count":29,"outputs":[{"execution_count":29,"output_type":"execute_result","data":{"text/plain":"Text(0, 0.5, 'BV/TV')"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"### Correlation\ndf.corr()","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:12:47.508568Z","iopub.execute_input":"2024-07-22T02:12:47.508897Z","iopub.status.idle":"2024-07-22T02:12:47.520010Z","shell.execute_reply.started":"2024-07-22T02:12:47.508869Z","shell.execute_reply":"2024-07-22T02:12:47.518797Z"},"trusted":true},"execution_count":30,"outputs":[{"execution_count":30,"output_type":"execute_result","data":{"text/plain":"          HbA1c     BV/TV\nHbA1c  1.000000 -0.258071\nBV/TV -0.258071  1.000000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>HbA1c</th>\n      <th>BV/TV</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>HbA1c</th>\n      <td>1.000000</td>\n      <td>-0.258071</td>\n    </tr>\n    <tr>\n      <th>BV/TV</th>\n      <td>-0.258071</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"### Seaborn for visualizations\nimport seaborn as sns\nsns.pairplot(df)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:12:47.521531Z","iopub.execute_input":"2024-07-22T02:12:47.521935Z","iopub.status.idle":"2024-07-22T02:12:48.794880Z","shell.execute_reply.started":"2024-07-22T02:12:47.521899Z","shell.execute_reply":"2024-07-22T02:12:48.793570Z"},"trusted":true},"execution_count":31,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"execution_count":31,"output_type":"execute_result","data":{"text/plain":"<seaborn.axisgrid.PairGrid at 0x7f61f35300a0>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 500x500 with 6 Axes>","image/png":"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"},"metadata":{}}]},{"cell_type":"code","source":"### Independent and Dependent features\nX= df[['HbA1c']] ### Independent feaure should be data frame or 2D array.\ny=df['BV/TV'] ### This variable can be serier or 1D array","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:12:48.796453Z","iopub.execute_input":"2024-07-22T02:12:48.796902Z","iopub.status.idle":"2024-07-22T02:12:48.803648Z","shell.execute_reply.started":"2024-07-22T02:12:48.796861Z","shell.execute_reply":"2024-07-22T02:12:48.802377Z"},"trusted":true},"execution_count":32,"outputs":[]},{"cell_type":"code","source":"### Train Test Split\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test= train_test_split(X,y,test_size=0.20,random_state=0)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:12:48.807680Z","iopub.execute_input":"2024-07-22T02:12:48.808144Z","iopub.status.idle":"2024-07-22T02:12:48.815768Z","shell.execute_reply.started":"2024-07-22T02:12:48.808104Z","shell.execute_reply":"2024-07-22T02:12:48.814774Z"},"trusted":true},"execution_count":33,"outputs":[]},{"cell_type":"code","source":"### Standardization\n#from sklearn.preprocessing import StandardScaler\n#scaler=StandardScaler()\n#X_train=scaler.fit_transform(X_train)\n#X_test=scaler.transform(X_test)\n#X_test","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:12:48.817129Z","iopub.execute_input":"2024-07-22T02:12:48.817481Z","iopub.status.idle":"2024-07-22T02:12:48.827037Z","shell.execute_reply.started":"2024-07-22T02:12:48.817453Z","shell.execute_reply":"2024-07-22T02:12:48.825712Z"},"trusted":true},"execution_count":34,"outputs":[]},{"cell_type":"code","source":"### Apply Simple Linear Regression\nfrom sklearn.linear_model import LinearRegression\nregression=LinearRegression()\nregression.fit(X_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:12:48.828505Z","iopub.execute_input":"2024-07-22T02:12:48.828855Z","iopub.status.idle":"2024-07-22T02:12:48.843196Z","shell.execute_reply.started":"2024-07-22T02:12:48.828829Z","shell.execute_reply":"2024-07-22T02:12:48.841985Z"},"trusted":true},"execution_count":35,"outputs":[{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"LinearRegression()","text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"print(\"Coefficient or slope:\",regression.coef_)\nprint(\"Intercept:\",regression.intercept_)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:12:48.844533Z","iopub.execute_input":"2024-07-22T02:12:48.844930Z","iopub.status.idle":"2024-07-22T02:12:48.854307Z","shell.execute_reply.started":"2024-07-22T02:12:48.844897Z","shell.execute_reply":"2024-07-22T02:12:48.853149Z"},"trusted":true},"execution_count":36,"outputs":[{"name":"stdout","text":"Coefficient or slope: [-0.87667354]\nIntercept: 26.376993845515717\n","output_type":"stream"}]},{"cell_type":"code","source":"### Plot training data plot best fit line\nplt.scatter(X_train,y_train)\nplt.plot(X_train,regression.predict(X_train))\nplt.xlabel('HbA1c')\nplt.ylabel('BV/TV')","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:12:48.855767Z","iopub.execute_input":"2024-07-22T02:12:48.856110Z","iopub.status.idle":"2024-07-22T02:12:49.126479Z","shell.execute_reply.started":"2024-07-22T02:12:48.856081Z","shell.execute_reply":"2024-07-22T02:12:49.125151Z"},"trusted":true},"execution_count":37,"outputs":[{"execution_count":37,"output_type":"execute_result","data":{"text/plain":"Text(0, 0.5, 'BV/TV')"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"### Plot test data plot best fit line\nplt.scatter(X_test,y_test)\nplt.plot(X_test,regression.predict(X_test))\nplt.xlabel('HbA1c')\nplt.ylabel('BV/TV')","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:12:49.127853Z","iopub.execute_input":"2024-07-22T02:12:49.128187Z","iopub.status.idle":"2024-07-22T02:12:49.386981Z","shell.execute_reply.started":"2024-07-22T02:12:49.128159Z","shell.execute_reply":"2024-07-22T02:12:49.385898Z"},"trusted":true},"execution_count":38,"outputs":[{"execution_count":38,"output_type":"execute_result","data":{"text/plain":"Text(0, 0.5, 'BV/TV')"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# Transformation Applying","metadata":{}},{"cell_type":"code","source":"'''# Custom function for reciprocal transformation\ndef reciprocal_transform(x):\n    return 1 / x\n\n# Create the transformer\ntrf = FunctionTransformer(func=reciprocal_transform)'''\n\n\n#Exponetial Transform\n#trf= FunctionTransformer(func=np.exp)  \n\n#Squareroot Transform\n#trf= FunctionTransformer(func=np.sqrt)  \n\n\n#Box-Cox Transform\ntrf = PowerTransformer(method='box-cox')\n\n\n#Log transform\n#trf= FunctionTransformer(func=np.log1p)  \nX_train_log_transformed= trf.fit_transform(X_train)\nX_test_log_transformed= trf.transform(X_test) \n\n#Box-Cox Transform\npd.DataFrame({'cols':X_train.columns,'box_cox_lambdas':trf.lambdas_})","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:12:49.388515Z","iopub.execute_input":"2024-07-22T02:12:49.388940Z","iopub.status.idle":"2024-07-22T02:12:49.406011Z","shell.execute_reply.started":"2024-07-22T02:12:49.388902Z","shell.execute_reply":"2024-07-22T02:12:49.404908Z"},"trusted":true},"execution_count":39,"outputs":[{"execution_count":39,"output_type":"execute_result","data":{"text/plain":"    cols  box_cox_lambdas\n0  HbA1c        -1.546954","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cols</th>\n      <th>box_cox_lambdas</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>HbA1c</td>\n      <td>-1.546954</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# Metrics After Transform","metadata":{}},{"cell_type":"code","source":"regression=LinearRegression(n_jobs=-1)\nregression.fit(X_train_log_transformed,y_train)\ny_train_pred=regression.predict(X_train_log_transformed)\ny_pred=regression.predict(X_test_log_transformed)\n\n### Performance metrics\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\n\n#Training errors\nmse=mean_squared_error(y_train, y_train_pred)\nmae=mean_absolute_error(y_train,y_train_pred)\nrmse=np.sqrt(mse)\nprint('mse train',mse)\nprint('mae train',mae)\nprint('rmse train',rmse)\n\n###R square Formula\n# R^2 = 1- ssr /sst\n# R^2 = coefficient of determination SSR = sum of squares of residuals SST = total sum of squares\nfrom sklearn.metrics import r2_score\nscore=r2_score(y_train,y_train_pred)\nprint('r2_score train',score)\n\n#Testing errors\nmse=mean_squared_error(y_test, y_pred)\nmae=mean_absolute_error(y_test,y_pred)\nrmse=np.sqrt(mse)\nprint('mse test',mse)\nprint('mae test',mae)\nprint('rmse test',rmse)\n\n###R square Formula\n# R^2 = 1- ssr /sst\n# R^2 = coefficient of determination SSR = sum of squares of residuals SST = total sum of squares\nfrom sklearn.metrics import r2_score\nscore=r2_score(y_test,y_pred)\nprint('r2_score test',score)\n\n### Adjusted R^2 = 1-[(1-R^2)*(n-1)/(n-k-1)]\n# where  R^2:The R^2 of model n: The number of observations  k: the number of predictor variables\n### Display adjusted R- squared\n1-(1-score)*(len(y_test)-1)/(len(y_test)-X_test.shape[1]-1)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:12:49.407569Z","iopub.execute_input":"2024-07-22T02:12:49.408431Z","iopub.status.idle":"2024-07-22T02:12:49.427198Z","shell.execute_reply.started":"2024-07-22T02:12:49.408393Z","shell.execute_reply":"2024-07-22T02:12:49.426048Z"},"trusted":true},"execution_count":40,"outputs":[{"name":"stdout","text":"mse train 27.281078152330025\nmae train 3.758268411528616\nrmse train 5.223129153326579\nr2_score train 0.03567647472605584\nmse test 30.028848635195214\nmae test 4.361431456367029\nrmse test 5.47985845028822\nr2_score test 0.11464372808002865\n","output_type":"stream"},{"execution_count":40,"output_type":"execute_result","data":{"text/plain":"0.05561997661869722"},"metadata":{}}]},{"cell_type":"markdown","source":"#  Crossvalidation to check ","metadata":{}},{"cell_type":"code","source":"X_transformed= trf.fit_transform(X)\nregression=LinearRegression(n_jobs=-1)\nprint('r2_score=',-(np.mean(cross_val_score(regression,X_transformed,y,scoring='r2',cv=3))))\n\nprint('Mean squared error',np.mean(cross_val_score(regression,X_transformed,y,scoring='neg_mean_squared_error',cv=5)))\n# Perform cross-validation\nscores = cross_validate(regression, X_transformed, y, cv=5, scoring='neg_mean_squared_error')\n\n# Print the mean squared error (negative because Scikit-Learn uses negated values)\nprint(f\"Mean squared error: {-scores['test_score'].mean():.4f}\")","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:12:49.428628Z","iopub.execute_input":"2024-07-22T02:12:49.428927Z","iopub.status.idle":"2024-07-22T02:12:49.475800Z","shell.execute_reply.started":"2024-07-22T02:12:49.428902Z","shell.execute_reply":"2024-07-22T02:12:49.474703Z"},"trusted":true},"execution_count":41,"outputs":[{"name":"stdout","text":"r2_score= 0.36368158387986527\nMean squared error -31.82384038182456\nMean squared error: 31.8238\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Random State Values","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\n\n# Function to evaluate model performance\ndef evaluate_model(random_state):\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=random_state)\n    \n    # Applying Linear Regression\n    regression=LinearRegression(n_jobs=-1)\n    regression.fit(X_train_log_transformed,y_train)\n    y_train_pred=regression.predict(X_train_log_transformed)\n    y_pred=regression.predict(X_test_log_transformed)\n    \n    mse_train=mean_squared_error(y_train, y_train_pred)\n    mse_test=mean_squared_error(y_test, y_pred)\n    r2_train=r2_score(y_train,y_train_pred)\n    r2_test=r2_score(y_test,y_pred)\n    \n    return random_state, mse_train, mse_test, r2_train, r2_test\n\n# Iterate over different random_state values\nresults = []\nfor random_state in range(200):\n    results.append(evaluate_model(random_state))\n\n# Convert results to DataFrame\nresults_df = pd.DataFrame(results, columns=['random_state', 'mse_train', 'mse_test', 'r2_train', 'r2_test'])\n\n# Find the best random_state values based on Test MSE\nbest_random_states = results_df.nsmallest(50, 'mse_test')\n\n# Print the training and testing MSE with respect to the best random_state values\nprint(\"Best random_state values based on Test MSE:\")\nfor index, row in best_random_states.iterrows():\n    print(f\"Random State: {row['random_state']}\")\n    print(f\"Training MSE: {row['mse_train']:.4f}, Testing MSE: {row['mse_test']:.4f}\")\n    print(f\"Training R2: {row['r2_train']:.4f}, Testing R2: {row['r2_test']:.4f}\")\n    print(\"---\")","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:12:49.477399Z","iopub.execute_input":"2024-07-22T02:12:49.477853Z","iopub.status.idle":"2024-07-22T02:12:50.138477Z","shell.execute_reply.started":"2024-07-22T02:12:49.477813Z","shell.execute_reply":"2024-07-22T02:12:50.137447Z"},"trusted":true},"execution_count":42,"outputs":[{"name":"stdout","text":"Best random_state values based on Test MSE:\nRandom State: 117.0\nTraining MSE: 35.5951, Testing MSE: 5.2261\nTraining R2: 0.0085, Testing R2: -0.1334\n---\nRandom State: 19.0\nTraining MSE: 34.6603, Testing MSE: 8.2776\nTraining R2: 0.0108, Testing R2: -0.0896\n---\nRandom State: 115.0\nTraining MSE: 34.1969, Testing MSE: 9.0261\nTraining R2: 0.0143, Testing R2: -0.0241\n---\nRandom State: 196.0\nTraining MSE: 33.1263, Testing MSE: 10.5045\nTraining R2: 0.0268, Testing R2: 0.1301\n---\nRandom State: 77.0\nTraining MSE: 34.3975, Testing MSE: 10.7667\nTraining R2: 0.0006, Testing R2: -0.0169\n---\nRandom State: 31.0\nTraining MSE: 33.7916, Testing MSE: 11.3614\nTraining R2: 0.0044, Testing R2: 0.0883\n---\nRandom State: 174.0\nTraining MSE: 34.1505, Testing MSE: 11.5562\nTraining R2: 0.0001, Testing R2: 0.0038\n---\nRandom State: 13.0\nTraining MSE: 34.0963, Testing MSE: 12.5831\nTraining R2: 0.0003, Testing R2: -0.3980\n---\nRandom State: 78.0\nTraining MSE: 33.8012, Testing MSE: 12.8415\nTraining R2: 0.0061, Testing R2: -0.0546\n---\nRandom State: 55.0\nTraining MSE: 33.6305, Testing MSE: 12.8700\nTraining R2: 0.0061, Testing R2: -0.0007\n---\nRandom State: 6.0\nTraining MSE: 33.6877, Testing MSE: 13.3976\nTraining R2: 0.0003, Testing R2: -0.0206\n---\nRandom State: 132.0\nTraining MSE: 33.7328, Testing MSE: 13.4976\nTraining R2: 0.0002, Testing R2: -0.1039\n---\nRandom State: 54.0\nTraining MSE: 33.6768, Testing MSE: 13.5158\nTraining R2: 0.0010, Testing R2: -0.0403\n---\nRandom State: 184.0\nTraining MSE: 33.3553, Testing MSE: 13.5455\nTraining R2: 0.0123, Testing R2: -0.0357\n---\nRandom State: 96.0\nTraining MSE: 30.4874, Testing MSE: 13.9298\nTraining R2: 0.0990, Testing R2: -0.1712\n---\nRandom State: 131.0\nTraining MSE: 33.2589, Testing MSE: 14.4959\nTraining R2: 0.0081, Testing R2: -0.1786\n---\nRandom State: 197.0\nTraining MSE: 33.1988, Testing MSE: 14.8479\nTraining R2: 0.0032, Testing R2: 0.0004\n---\nRandom State: 70.0\nTraining MSE: 33.0986, Testing MSE: 15.2902\nTraining R2: 0.0022, Testing R2: -0.0313\n---\nRandom State: 159.0\nTraining MSE: 33.2501, Testing MSE: 15.4449\nTraining R2: 0.0009, Testing R2: -0.1059\n---\nRandom State: 92.0\nTraining MSE: 32.6755, Testing MSE: 15.6766\nTraining R2: 0.0126, Testing R2: 0.0061\n---\nRandom State: 107.0\nTraining MSE: 32.5909, Testing MSE: 15.8399\nTraining R2: 0.0120, Testing R2: 0.0190\n---\nRandom State: 67.0\nTraining MSE: 32.9398, Testing MSE: 15.9377\nTraining R2: 0.0050, Testing R2: -0.0109\n---\nRandom State: 163.0\nTraining MSE: 32.9148, Testing MSE: 16.0523\nTraining R2: 0.0053, Testing R2: -0.0907\n---\nRandom State: 192.0\nTraining MSE: 32.6054, Testing MSE: 16.2131\nTraining R2: 0.0145, Testing R2: -0.1118\n---\nRandom State: 105.0\nTraining MSE: 32.9670, Testing MSE: 16.3182\nTraining R2: 0.0011, Testing R2: -0.0274\n---\nRandom State: 139.0\nTraining MSE: 32.7278, Testing MSE: 16.3662\nTraining R2: 0.0080, Testing R2: -0.0682\n---\nRandom State: 68.0\nTraining MSE: 32.8960, Testing MSE: 16.6270\nTraining R2: 0.0008, Testing R2: -0.0427\n---\nRandom State: 27.0\nTraining MSE: 33.0351, Testing MSE: 16.7612\nTraining R2: 0.0059, Testing R2: -0.1474\n---\nRandom State: 71.0\nTraining MSE: 33.0802, Testing MSE: 16.9040\nTraining R2: 0.0032, Testing R2: -0.3215\n---\nRandom State: 58.0\nTraining MSE: 31.8128, Testing MSE: 17.0551\nTraining R2: 0.0401, Testing R2: -0.1134\n---\nRandom State: 124.0\nTraining MSE: 32.7864, Testing MSE: 17.2428\nTraining R2: 0.0066, Testing R2: -0.2579\n---\nRandom State: 199.0\nTraining MSE: 32.6971, Testing MSE: 17.5827\nTraining R2: 0.0000, Testing R2: -0.0661\n---\nRandom State: 129.0\nTraining MSE: 30.7865, Testing MSE: 17.5990\nTraining R2: 0.0605, Testing R2: -0.0669\n---\nRandom State: 110.0\nTraining MSE: 32.5540, Testing MSE: 17.9035\nTraining R2: 0.0001, Testing R2: 0.0013\n---\nRandom State: 29.0\nTraining MSE: 32.8055, Testing MSE: 18.2455\nTraining R2: 0.0040, Testing R2: -0.7679\n---\nRandom State: 50.0\nTraining MSE: 32.7182, Testing MSE: 18.3351\nTraining R2: 0.0003, Testing R2: -0.3707\n---\nRandom State: 176.0\nTraining MSE: 30.8801, Testing MSE: 18.7302\nTraining R2: 0.0359, Testing R2: 0.0299\n---\nRandom State: 104.0\nTraining MSE: 31.1224, Testing MSE: 19.0082\nTraining R2: 0.0255, Testing R2: 0.0211\n---\nRandom State: 171.0\nTraining MSE: 32.6639, Testing MSE: 19.1681\nTraining R2: 0.0036, Testing R2: -0.1666\n---\nRandom State: 10.0\nTraining MSE: 32.4894, Testing MSE: 19.2778\nTraining R2: 0.0084, Testing R2: -0.1485\n---\nRandom State: 142.0\nTraining MSE: 31.7265, Testing MSE: 19.4127\nTraining R2: 0.0285, Testing R2: -0.2550\n---\nRandom State: 118.0\nTraining MSE: 32.2647, Testing MSE: 19.4806\nTraining R2: 0.0028, Testing R2: -0.1259\n---\nRandom State: 2.0\nTraining MSE: 32.0431, Testing MSE: 19.8417\nTraining R2: 0.0165, Testing R2: -0.1697\n---\nRandom State: 146.0\nTraining MSE: 32.0360, Testing MSE: 19.8926\nTraining R2: 0.0057, Testing R2: -0.0401\n---\nRandom State: 133.0\nTraining MSE: 32.3199, Testing MSE: 19.9928\nTraining R2: 0.0000, Testing R2: -0.3866\n---\nRandom State: 43.0\nTraining MSE: 31.9245, Testing MSE: 20.5443\nTraining R2: 0.0001, Testing R2: -0.0438\n---\nRandom State: 99.0\nTraining MSE: 30.6085, Testing MSE: 20.6599\nTraining R2: 0.0491, Testing R2: -0.1352\n---\nRandom State: 135.0\nTraining MSE: 31.8136, Testing MSE: 20.7562\nTraining R2: 0.0034, Testing R2: -0.0213\n---\nRandom State: 28.0\nTraining MSE: 31.7104, Testing MSE: 20.9719\nTraining R2: 0.0015, Testing R2: -0.0497\n---\nRandom State: 156.0\nTraining MSE: 32.0053, Testing MSE: 21.2129\nTraining R2: 0.0006, Testing R2: -0.3715\n---\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Box-Cox Checking Plot Before and After Tranfrormation ","metadata":{}},{"cell_type":"code","source":"'''X_train_log_transformed= pd.DataFrame(X_train_log_transformed,columns=X_train.columns)\nfor col in X_train_log_transformed.columns:\n    plt.figure(figsize=(14,4))\n    plt.subplot(121)\n    sns.distplot(X_train[col])\n    plt.title(col)\n    \n    plt.subplot(122)\n    sns.distplot(X_train_log_transformed[col])\n    plt.title(col)\n    \n    plt.show()'''\n","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:12:50.139861Z","iopub.execute_input":"2024-07-22T02:12:50.140327Z","iopub.status.idle":"2024-07-22T02:12:50.148102Z","shell.execute_reply.started":"2024-07-22T02:12:50.140263Z","shell.execute_reply":"2024-07-22T02:12:50.146849Z"},"trusted":true},"execution_count":43,"outputs":[{"execution_count":43,"output_type":"execute_result","data":{"text/plain":"'X_train_log_transformed= pd.DataFrame(X_train_log_transformed,columns=X_train.columns)\\nfor col in X_train_log_transformed.columns:\\n    plt.figure(figsize=(14,4))\\n    plt.subplot(121)\\n    sns.distplot(X_train[col])\\n    plt.title(col)\\n    \\n    plt.subplot(122)\\n    sns.distplot(X_train_log_transformed[col])\\n    plt.title(col)\\n    \\n    plt.show()'"},"metadata":{}}]},{"cell_type":"markdown","source":"#   Checking Plot Before and After Tranfrormation ","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize=(10,3))\nplt.subplot(121)\nsns.distplot(X_train['HbA1c'])\nplt.title('HbA1c PDF')\n\nplt.figure(figsize=(14,4))\nplt.subplot(121)\nsns.distplot(X_train_log_transformed['HbA1c'])\nplt.title('HbA1c PDF')\n\nplt.figure(figsize=(14,4))\n\nplt.subplot(121)\nstats.probplot(X_train['HbA1c'], dist=\"norm\", plot=plt)\nplt.title('HbA1c Before ')\n\nplt.subplot(122)\nstats.probplot(X_train_log_transformed['HbA1c'], dist=\"norm\", plot=plt)\nplt.title('HbA1c After ')","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:12:50.153834Z","iopub.execute_input":"2024-07-22T02:12:50.154274Z","iopub.status.idle":"2024-07-22T02:12:50.721481Z","shell.execute_reply.started":"2024-07-22T02:12:50.154245Z","shell.execute_reply":"2024-07-22T02:12:50.720113Z"},"trusted":true},"execution_count":44,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_33/3107429556.py:3: UserWarning: \n\n`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n\nPlease adapt your code to use either `displot` (a figure-level function with\nsimilar flexibility) or `histplot` (an axes-level function for histograms).\n\nFor a guide to updating your code to use the new functions, please see\nhttps://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n\n  sns.distplot(X_train['HbA1c'])\n/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","Cell \u001b[0;32mIn[44], line 8\u001b[0m\n\u001b[1;32m      6\u001b[0m plt\u001b[38;5;241m.\u001b[39mfigure(figsize\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m14\u001b[39m,\u001b[38;5;241m4\u001b[39m))\n\u001b[1;32m      7\u001b[0m plt\u001b[38;5;241m.\u001b[39msubplot(\u001b[38;5;241m121\u001b[39m)\n\u001b[0;32m----> 8\u001b[0m sns\u001b[38;5;241m.\u001b[39mdistplot(\u001b[43mX_train_log_transformed\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mHbA1c\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m)\n\u001b[1;32m      9\u001b[0m plt\u001b[38;5;241m.\u001b[39mtitle(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mHbA1c PDF\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m     11\u001b[0m plt\u001b[38;5;241m.\u001b[39mfigure(figsize\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m14\u001b[39m,\u001b[38;5;241m4\u001b[39m))\n","\u001b[0;31mIndexError\u001b[0m: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices"],"ename":"IndexError","evalue":"only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices","output_type":"error"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x300 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1400x400 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# Ridge Regression ","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import Ridge\nfrom sklearn.model_selection import GridSearchCV\nridge_regressor=Ridge()\n\nparameters={'alpha':[1e-15,1e-10,1e-8,1e-3,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100]}\nridgecv=GridSearchCV(ridge_regressor,parameters,scoring='neg_mean_squared_error',cv=5)\nridgecv.fit(X_train,y_train)\n\nprint(ridgecv.best_params_)\nprint(-(ridgecv.best_score_))\n\nridge_pred=ridgecv.predict(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:12:50.722650Z","iopub.status.idle":"2024-07-22T02:12:50.723035Z","shell.execute_reply.started":"2024-07-22T02:12:50.722848Z","shell.execute_reply":"2024-07-22T02:12:50.722864Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Metrics of Test set of Ridge","metadata":{}},{"cell_type":"code","source":"#y_pred=regression.predict(X_test_log_transformed)\nridge_pred=ridgecv.predict(X_test)\nridge_train_pred=ridgecv.predict(X_train)\n### Performance metrics\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\n\n#Training error\nmse=mean_squared_error(y_train, ridge_train_pred)\nmae=mean_absolute_error(y_train,ridge_train_pred)\nrmse=np.sqrt(mse)\nprint('mse train',mse)\nprint('mae train',mae)\nprint('rmse train',rmse)\n\n###R square Formula\n# R^2 = 1- ssr /sst\n# R^2 = coefficient of determination SSR = sum of squares of residuals SST = total sum of squares\nfrom sklearn.metrics import r2_score\nscore=r2_score(y_train,ridge_train_pred)\nprint('r2_score_train',score)\n\n\n#Testing error\nmse=mean_squared_error(y_test, ridge_pred)\nmae=mean_absolute_error(y_test,ridge_pred)\nrmse=np.sqrt(mse)\nprint('mse test',mse)\nprint('mae test',mae)\nprint('rmse test',rmse)\n\n###R square Formula\n# R^2 = 1- ssr /sst\n# R^2 = coefficient of determination SSR = sum of squares of residuals SST = total sum of squares\nfrom sklearn.metrics import r2_score\nscore=r2_score(y_test,ridge_pred)\nprint('r2_score_test',score)\n\n### Adjusted R^2 = 1-[(1-R^2)*(n-1)/(n-k-1)]\n# where  R^2:The R^2 of model n: The number of observations  k: the number of predictor variables\n### Display adjusted R- squared\n1-(1-score)*(len(y_test)-1)/(len(y_test)-X_test.shape[1]-1)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:12:50.724828Z","iopub.status.idle":"2024-07-22T02:12:50.725242Z","shell.execute_reply.started":"2024-07-22T02:12:50.725025Z","shell.execute_reply":"2024-07-22T02:12:50.725043Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Random Values","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import mean_squared_error, r2_score\n\n# Function to evaluate model performance\ndef evaluate_model(random_state):\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=random_state)\n    \n    # Applying Linear Regression\n    ridge_regressor=Ridge()\n    ridgecv.fit(X_train,y_train)\n    ridge_pred=ridgecv.predict(X_test)\n    ridge_train_pred=ridgecv.predict(X_train)\n    \n    mse_train = mean_squared_error(y_train, ridge_train_pred)\n    mse_test = mean_squared_error(y_test, ridge_pred)\n    r2_train = r2_score(y_train, ridge_train_pred)\n    r2_test = r2_score(y_test, ridge_pred)\n    \n    return random_state, mse_train, mse_test, r2_train, r2_test\n\n# Iterate over different random_state values\nresults = []\nfor random_state in range(100):\n    results.append(evaluate_model(random_state))\n\n# Convert results to DataFrame\nresults_df = pd.DataFrame(results, columns=['random_state', 'mse_train', 'mse_test', 'r2_train', 'r2_test'])\n\n# Find the best random_state values based on Test MSE\nbest_random_states = results_df.nsmallest(50, 'mse_test')\n\n# Print the training and testing MSE with respect to the best random_state values\nprint(\"Best random_state values based on Test MSE:\")\nfor index, row in best_random_states.iterrows():\n    print(f\"Random State: {row['random_state']}\")\n    print(f\"Training MSE: {row['mse_train']:.4f}, Testing MSE: {row['mse_test']:.4f}\")\n    print(f\"Training R2: {row['r2_train']:.4f}, Testing R2: {row['r2_test']:.4f}\")\n    print(\"---\")\n","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:12:50.726953Z","iopub.status.idle":"2024-07-22T02:12:50.727350Z","shell.execute_reply.started":"2024-07-22T02:12:50.727163Z","shell.execute_reply":"2024-07-22T02:12:50.727179Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Lasso Regression","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import Lasso\nLasso=Lasso()\nparameters={'alpha':[1e-15,1e-10,1e-8,1e-3,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100]}\nLassocv=GridSearchCV(Lasso,parameters,scoring='neg_mean_squared_error',cv=5)\nLassocv.fit(X_train,y_train)\n\nprint(Lassocv.best_params_)\nprint((-Lassocv.best_score_))\n\nLasso_pred=Lassocv.predict(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:12:50.728482Z","iopub.status.idle":"2024-07-22T02:12:50.728831Z","shell.execute_reply.started":"2024-07-22T02:12:50.728665Z","shell.execute_reply":"2024-07-22T02:12:50.728679Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Metrics of Test set Lasso","metadata":{}},{"cell_type":"code","source":"#y_pred=regression.predict(X_test_log_transformed)\nLasso_pred=Lassocv.predict(X_test)\nLasso_train_pred=Lassocv.predict(X_train)\n### Performance metrics\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\n\n#Training error\nmse=mean_squared_error(y_train, Lasso_train_pred)\nmae=mean_absolute_error(y_train,Lasso_train_pred)\nrmse=np.sqrt(mse)\nprint('mse train',mse)\nprint('mae train',mae)\nprint('rmse train',rmse)\n\n###R square Formula\n# R^2 = 1- ssr /sst\n# R^2 = coefficient of determination SSR = sum of squares of residuals SST = total sum of squares\nfrom sklearn.metrics import r2_score\nscore=r2_score(y_train,Lasso_train_pred)\nprint('r2_score_train',score)\n\n\n#Testing error\nmse=mean_squared_error(y_test, Lasso_pred)\nmae=mean_absolute_error(y_test,Lasso_pred)\nrmse=np.sqrt(mse)\nprint('mse test',mse)\nprint('mae test',mae)\nprint('rmse test',rmse)\n\n###R square Formula\n# R^2 = 1- ssr /sst\n# R^2 = coefficient of determination SSR = sum of squares of residuals SST = total sum of squares\nfrom sklearn.metrics import r2_score\nscore=r2_score(y_test,Lasso_pred)\nprint('r2_score_test',score)\n\n### Adjusted R^2 = 1-[(1-R^2)*(n-1)/(n-k-1)]\n# where  R^2:The R^2 of model n: The number of observations  k: the number of predictor variables\n### Display adjusted R- squared\n1-(1-score)*(len(y_test)-1)/(len(y_test)-X_test.shape[1]-1)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:12:50.730274Z","iopub.status.idle":"2024-07-22T02:12:50.730652Z","shell.execute_reply.started":"2024-07-22T02:12:50.730464Z","shell.execute_reply":"2024-07-22T02:12:50.730480Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# POLYNOMIAL","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression,SGDRegressor\nfrom sklearn.preprocessing import PolynomialFeatures,StandardScaler\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.metrics import r2_score\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.preprocessing import FunctionTransformer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import PowerTransformer\n%matplotlib inline","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:13:00.955786Z","iopub.execute_input":"2024-07-22T02:13:00.956230Z","iopub.status.idle":"2024-07-22T02:13:00.966712Z","shell.execute_reply.started":"2024-07-22T02:13:00.956196Z","shell.execute_reply":"2024-07-22T02:13:00.965539Z"},"trusted":true},"execution_count":45,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv(\"/kaggle/input/bv-tv/BV_TV DATA - Sheet1.csv\")\n### Independent and Dependent features\nX= df[['HbA1c']] ### Independent feaure should be data frame or 2D array.\ny=df['BV/TV'] ### This variable can be serier or 1D array\n### Train Test Split\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test= train_test_split(X,y,test_size=0.20,random_state=42)\n\n#Applying Linear Regression\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\n\nlr=LinearRegression()\nlr.fit(X_train,y_train)\ny_pred=lr.predict(X_test)\n\n#Applying Polynomial Regession \n#degree2\n\npoly = PolynomialFeatures(degree=8)\n\nX_poly = poly.fit_transform(X_train)\n\nL1=LinearRegression()\nL1.fit(X_poly,y_train)\n\nX_test_poly = poly.transform(X_test) #Also try transform itself neither fit_transform\ny_pred=L1.predict(X_test_poly)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:13:06.235621Z","iopub.execute_input":"2024-07-22T02:13:06.236007Z","iopub.status.idle":"2024-07-22T02:13:06.262609Z","shell.execute_reply.started":"2024-07-22T02:13:06.235973Z","shell.execute_reply":"2024-07-22T02:13:06.261519Z"},"trusted":true},"execution_count":46,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.pipeline import Pipeline\nimport matplotlib.pyplot as plt\n\n# Load data\ndf = pd.read_csv(\"/kaggle/input/bv-tv/BV_TV DATA - Sheet1.csv\")\n\n# Independent and Dependent features\nX = df[['HbA1c']]  # Independent feature should be data frame or 2D array.\ny = df['BV/TV']  # This variable can be series or 1D array\n\n# Train Test Split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=54)\n\n# Create a pipeline with PolynomialFeatures and LinearRegression\npipeline = Pipeline([\n    ('poly', PolynomialFeatures()),\n    ('linear', LinearRegression())\n])\n\n# Define the parameter grid for hyperparameter tuning\nparam_grid = {\n    'poly__degree': [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]\n}\n\n# Create a GridSearchCV object\ngrid_search = GridSearchCV(pipeline, param_grid, cv=5, scoring='neg_mean_squared_error')\n\n# Fit the model\ngrid_search.fit(X_train, y_train)\n\n# Get the best parameters\nbest_params = grid_search.best_params_\nprint(\"Best parameters found: \", best_params)\n\n# Predict with the best model\nbest_model = grid_search.best_estimator_\ny_pred = best_model.predict(X_test)\n\n# Evaluate the model\nmse = mean_squared_error(y_test, y_pred)\nmae = mean_absolute_error(y_test, y_pred)\nrmse = np.sqrt(mse)\nr2 = -(r2_score(y_test, y_pred))\n\nprint(\"MSE: \", mse)\nprint(\"MAE: \", mae)\nprint(\"RMSE: \", rmse)\nprint('R2_score: ', r2)\n\n# Plot the results\nplt.plot(X_test, y_pred, label='Model', color='red')\nplt.scatter(X_train, y_train, label='Data', marker='+', color='green')\nplt.legend()\nplt.xlabel(\"HbA1c\")\nplt.ylabel(\"BV/TV\")\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:13:10.323261Z","iopub.execute_input":"2024-07-22T02:13:10.323919Z","iopub.status.idle":"2024-07-22T02:13:12.101743Z","shell.execute_reply.started":"2024-07-22T02:13:10.323877Z","shell.execute_reply":"2024-07-22T02:13:12.100536Z"},"trusted":true},"execution_count":47,"outputs":[{"name":"stdout","text":"Best parameters found:  {'poly__degree': 4}\nMSE:  21.922158463874172\nMAE:  3.7883645741434293\nRMSE:  4.682110471130959\nR2_score:  0.6873039703272337\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"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"},"metadata":{}}]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# Predict with the best model\nbest_model = grid_search.best_estimator_\ny_train_pred = best_model.predict(X_train)\ny_test_pred = best_model.predict(X_test)\n\n# Evaluate the model on the training set\ntrain_mse = mean_squared_error(y_train, y_train_pred)\ntrain_mae = mean_absolute_error(y_train, y_train_pred)\ntrain_rmse = np.sqrt(train_mse)\ntrain_r2 = r2_score(y_train, y_train_pred)\n\nprint(\"Training MSE: \", train_mse)\nprint(\"Training MAE: \", train_mae)\nprint(\"Training RMSE: \", train_rmse)\nprint('Training R2_score: ', train_r2)\n\n# Evaluate the model on the testing set\ntest_mse = mean_squared_error(y_test, y_test_pred)\ntest_mae = mean_absolute_error(y_test, y_test_pred)\ntest_rmse = np.sqrt(test_mse)\ntest_r2 = r2_score(y_test, y_test_pred)\n\n\n# Plot the results\nplt.figure(figsize=(6, 5))\nplt.scatter(X_train, y_train, label='Training Data', color='green', marker='+')\nplt.plot(X_train, y_train_pred, label='Model (Training)', color='red', linewidth=2)\n\nplt.legend()\nplt.xlabel(\"HbA1c\")\nplt.ylabel(\"BV/TV\")\nplt.title(\"Polynomial Regression Model\")\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:13:18.088714Z","iopub.execute_input":"2024-07-22T02:13:18.089751Z","iopub.status.idle":"2024-07-22T02:13:18.343663Z","shell.execute_reply.started":"2024-07-22T02:13:18.089712Z","shell.execute_reply":"2024-07-22T02:13:18.342464Z"},"trusted":true},"execution_count":48,"outputs":[{"name":"stdout","text":"Training MSE:  27.527111983731157\nTraining MAE:  3.922705828327152\nTraining RMSE:  5.246628630247347\nTraining R2_score:  0.18345484886797814\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 600x500 with 1 Axes>","image/png":"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Mz3y8vLK9WeYbBNrJqhS6NOnDwAUqyj/6KOPAEBnZXpRTz/9NP766y988skn8PX11TrRmKJ79+5wcnLCggULtD51fvPNN0hOTjaqLaWl+vSr+bzZ2dn44osvyvy5pk6dipycHPV7PHDgQNjb22POnDnFPm0LIXDnzh0AQMuWLeHr64uvvvpKa82E5cuXG93l36JFC0REROCDDz5AWlpase+rpurm5eUVG9rx9/dHUFCQespwSkpKsbUbmjRpAjs7O4PTivv06YP9+/djz5496tvS09OxZMkShIWFoWHDhka9FlO5u7tj0aJFmD17Nvr162ewfXl5eVi4cKHW7R9//DEUCoX651v1r6qHSaXo75K9vT0GDRqElStX4uTJk8WeT9f0aKo62DNBlULTpk0xYsQILFmyRN3Vv3//fixbtgzR0dFan4D1GTJkCKZOnYrVq1djzJgxpV6gyM/PDzNmzMCcOXPQq1cv9O/fH2fPnsUXX3yBVq1a6SzqLCvt27dHtWrVMGLECEyYMAEKhQLff/99qYdgDGnYsCH69OmDr7/+Gq+//joiIiLw9ttvY8aMGbh06RKio6Ph4eGB+Ph4rF69Gs8//zymTJkCJycnzJ49Gy+++CIeeughPPHEE7h06RJiYmIQERFh1FCVnZ0dvv76a/Tu3RuNGjXCM888g5o1a+Lq1avYtm0bPD09sXbtWqSmpqJWrVp47LHH0LRpU7i7u2Pz5s04cOAAPvzwQwDA1q1bMX78eDz++OOoW7cucnNz8f3336tPnvpMnz4dP/74I3r37o0JEybAx8cHy5YtQ3x8PFauXFmuq2UaqhVR6devH7p27YrXXnsNly5dQtOmTfHXX39hzZo1mDhxorp354EHHsBTTz2FL774AsnJyWjfvj22bNmicw2M+fPnY9u2bWjTpg2ee+45NGzYEHfv3sXhw4exefNm3L17t8xfK9kIi8whITKB5tQ4Q3JycsScOXNEeHi4cHR0FMHBwWLGjBla0yGFKD41VFOfPn0EALF7926j26Ga+rdt2zat2xcuXCjq168vHB0dRUBAgBgzZoy4d+9esbY0atSo2HMVneanAkBrmqOuqaFxcXGibdu2wtXVVQQFBYmpU6eqp5VqttGUqaG62iiEENu3by82fXDlypXiwQcfFEqlUiiVSlG/fn0xbtw4cfbsWa37LliwQISG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"},"metadata":{}}]},{"cell_type":"code","source":"print(\"Testing MSE: \", test_mse)\nprint(\"Testing MAE: \", test_mae)\nprint(\"Testing RMSE: \", test_rmse)\nprint('Testing R2_score: ', test_r2)\n\nplt.scatter(X_test, y_test, label='Testing Data', color='blue', marker='x')\nplt.plot(X_test, y_test_pred, label='Model (Testing)', color='orange', linewidth=2, linestyle='--')\nplt.legend()\nplt.xlabel(\"HbA1c\")\nplt.ylabel(\"BV/TV\")\nplt.title(\"Polynomial Regression Model\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:12:50.739624Z","iopub.status.idle":"2024-07-22T02:12:50.739985Z","shell.execute_reply.started":"2024-07-22T02:12:50.739808Z","shell.execute_reply":"2024-07-22T02:12:50.739824Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Random Values","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\n\n\n# Function to evaluate polynomial regression model performance\ndef evaluate_model(random_state, degree):\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=random_state)\n    \n    # Applying Polynomial Features\n    poly = PolynomialFeatures(degree=degree)\n    X_train_poly = poly.fit_transform(X_train)\n    X_test_poly = poly.transform(X_test)\n    \n    # Applying Linear Regression on Polynomial Features\n    lr = LinearRegression()\n    lr.fit(X_train_poly, y_train)\n    y_pred_train = lr.predict(X_train_poly)\n    y_pred_test = lr.predict(X_test_poly)\n    \n    mse_train = mean_squared_error(y_train, y_pred_train)\n    mse_test = mean_squared_error(y_test, y_pred_test)\n    r2_train = r2_score(y_train, y_pred_train)\n    r2_test = r2_score(y_test, y_pred_test)\n    \n    return random_state, degree, mse_train, mse_test, r2_train, r2_test\n\n# Iterate over different random_state and degree values\nresults = []\ndegrees = [2,3,4,5,6,7,8]\n  # List of degrees to try\nfor random_state in range(100):\n    for degree in degrees:\n        results.append(evaluate_model(random_state, degree))\n\n# Convert results to DataFrame\nresults_df = pd.DataFrame(results, columns=['random_state', 'degree', 'mse_train', 'mse_test', 'r2_train', 'r2_test'])\n\n# Find the best random_state and degree values based on Test MSE\nbest_results = results_df.nsmallest(50, 'mse_test')\n\n# Print the training and testing MSE with respect to the best random_state and degree values\nprint(\"Best random_state and degree values based on Test MSE:\")\nfor index, row in best_results.iterrows():\n    print(f\"Random State: {row['random_state']}, Degree: {row['degree']}\")\n    print(f\"Training MSE: {row['mse_train']:.4f}, Testing MSE: {row['mse_test']:.4f}\")\n    print(f\"Training R2: {row['r2_train']:.4f}, Testing R2: {row['r2_test']:.4f}\")\n    print(\"---\")\n","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:15:14.647292Z","iopub.execute_input":"2024-07-22T02:15:14.647676Z","iopub.status.idle":"2024-07-22T02:15:19.348594Z","shell.execute_reply.started":"2024-07-22T02:15:14.647648Z","shell.execute_reply":"2024-07-22T02:15:19.347270Z"},"trusted":true},"execution_count":51,"outputs":[{"name":"stdout","text":"Best random_state and degree values based on Test MSE:\nRandom State: 77.0, Degree: 4.0\nTraining MSE: 30.4101, Testing MSE: 7.7992\nTraining R2: 0.1164, Testing R2: 0.2633\n---\nRandom State: 19.0, Degree: 2.0\nTraining MSE: 32.5826, Testing MSE: 7.8557\nTraining R2: 0.0701, Testing R2: -0.0341\n---\nRandom State: 19.0, Degree: 3.0\nTraining MSE: 32.5816, Testing MSE: 7.9392\nTraining R2: 0.0701, Testing R2: -0.0450\n---\nRandom State: 19.0, Degree: 6.0\nTraining MSE: 29.6502, Testing MSE: 8.8779\nTraining R2: 0.1538, Testing R2: -0.1686\n---\nRandom State: 19.0, Degree: 5.0\nTraining MSE: 29.7220, Testing MSE: 9.5118\nTraining R2: 0.1517, Testing R2: -0.2520\n---\nRandom State: 77.0, Degree: 3.0\nTraining MSE: 32.0594, Testing MSE: 10.0061\nTraining R2: 0.0685, Testing R2: 0.0549\n---\nRandom State: 77.0, Degree: 2.0\nTraining MSE: 32.0756, Testing MSE: 10.2028\nTraining R2: 0.0680, Testing R2: 0.0363\n---\nRandom State: 31.0, Degree: 4.0\nTraining MSE: 29.7895, Testing MSE: 10.2965\nTraining R2: 0.1223, Testing R2: 0.1737\n---\nRandom State: 19.0, Degree: 4.0\nTraining MSE: 29.9611, Testing MSE: 10.5543\nTraining R2: 0.1449, Testing R2: -0.3893\n---\nRandom State: 13.0, Degree: 4.0\nTraining MSE: 30.0716, Testing MSE: 10.7423\nTraining R2: 0.1183, Testing R2: -0.1935\n---\nRandom State: 13.0, Degree: 2.0\nTraining MSE: 31.9856, Testing MSE: 10.9446\nTraining R2: 0.0622, Testing R2: -0.2160\n---\nRandom State: 13.0, Degree: 3.0\nTraining MSE: 31.8905, Testing MSE: 11.0074\nTraining R2: 0.0650, Testing R2: -0.2229\n---\nRandom State: 6.0, Degree: 4.0\nTraining MSE: 29.5967, Testing MSE: 11.0117\nTraining R2: 0.1217, Testing R2: 0.1611\n---\nRandom State: 77.0, Degree: 5.0\nTraining MSE: 29.6877, Testing MSE: 11.0373\nTraining R2: 0.1374, Testing R2: -0.0425\n---\nRandom State: 6.0, Degree: 5.0\nTraining MSE: 29.1702, Testing MSE: 11.1216\nTraining R2: 0.1343, Testing R2: 0.1527\n---\nRandom State: 31.0, Degree: 2.0\nTraining MSE: 31.6021, Testing MSE: 11.6575\nTraining R2: 0.0689, Testing R2: 0.0645\n---\nRandom State: 50.0, Degree: 4.0\nTraining MSE: 29.6441, Testing MSE: 11.7616\nTraining R2: 0.0943, Testing R2: 0.1207\n---\nRandom State: 77.0, Degree: 6.0\nTraining MSE: 29.6859, Testing MSE: 11.8079\nTraining R2: 0.1375, Testing R2: -0.1153\n---\nRandom State: 13.0, Degree: 7.0\nTraining MSE: 27.0536, Testing MSE: 11.9903\nTraining R2: 0.2068, Testing R2: -0.3321\n---\nRandom State: 92.0, Degree: 4.0\nTraining MSE: 29.5489, Testing MSE: 12.0244\nTraining R2: 0.1071, Testing R2: 0.2376\n---\nRandom State: 31.0, Degree: 3.0\nTraining MSE: 31.4145, Testing MSE: 12.4539\nTraining R2: 0.0745, Testing R2: 0.0006\n---\nRandom State: 6.0, Degree: 7.0\nTraining MSE: 26.6908, Testing MSE: 12.4937\nTraining R2: 0.2079, Testing R2: 0.0482\n---\nRandom State: 27.0, Degree: 2.0\nTraining MSE: 31.3347, Testing MSE: 12.6331\nTraining R2: 0.0571, Testing R2: 0.1352\n---\nRandom State: 77.0, Degree: 7.0\nTraining MSE: 27.0243, Testing MSE: 12.7354\nTraining R2: 0.2148, Testing R2: -0.2029\n---\nRandom State: 31.0, Degree: 5.0\nTraining MSE: 29.0064, Testing MSE: 12.7945\nTraining R2: 0.1454, Testing R2: -0.0267\n---\nRandom State: 6.0, Degree: 2.0\nTraining MSE: 31.2964, Testing MSE: 12.8513\nTraining R2: 0.0712, Testing R2: 0.0210\n---\nRandom State: 31.0, Degree: 7.0\nTraining MSE: 26.5419, Testing MSE: 13.3755\nTraining R2: 0.2180, Testing R2: -0.0733\n---\nRandom State: 27.0, Degree: 4.0\nTraining MSE: 29.3301, Testing MSE: 13.4387\nTraining R2: 0.1174, Testing R2: 0.0801\n---\nRandom State: 6.0, Degree: 3.0\nTraining MSE: 31.1025, Testing MSE: 13.5357\nTraining R2: 0.0770, Testing R2: -0.0312\n---\nRandom State: 92.0, Degree: 7.0\nTraining MSE: 26.5381, Testing MSE: 13.5604\nTraining R2: 0.1981, Testing R2: 0.1402\n---\nRandom State: 92.0, Degree: 2.0\nTraining MSE: 31.3997, Testing MSE: 13.6092\nTraining R2: 0.0512, Testing R2: 0.1371\n---\nRandom State: 92.0, Degree: 6.0\nTraining MSE: 28.7783, Testing MSE: 13.7487\nTraining R2: 0.1304, Testing R2: 0.1283\n---\nRandom State: 13.0, Degree: 5.0\nTraining MSE: 29.1492, Testing MSE: 13.8612\nTraining R2: 0.1453, Testing R2: -0.5400\n---\nRandom State: 96.0, Degree: 4.0\nTraining MSE: 29.0137, Testing MSE: 14.0288\nTraining R2: 0.1426, Testing R2: -0.1796\n---\nRandom State: 6.0, Degree: 6.0\nTraining MSE: 28.6469, Testing MSE: 14.1305\nTraining R2: 0.1499, Testing R2: -0.0765\n---\nRandom State: 50.0, Degree: 7.0\nTraining MSE: 26.5928, Testing MSE: 14.1762\nTraining R2: 0.1875, Testing R2: -0.0598\n---\nRandom State: 19.0, Degree: 8.0\nTraining MSE: 26.0689, Testing MSE: 14.4823\nTraining R2: 0.2560, Testing R2: -0.9063\n---\nRandom State: 27.0, Degree: 3.0\nTraining MSE: 30.9860, Testing MSE: 14.6220\nTraining R2: 0.0675, Testing R2: -0.0009\n---\nRandom State: 19.0, Degree: 7.0\nTraining MSE: 26.6449, Testing MSE: 14.6603\nTraining R2: 0.2395, Testing R2: -0.9297\n---\nRandom State: 2.0, Degree: 2.0\nTraining MSE: 30.8606, Testing MSE: 14.6720\nTraining R2: 0.0528, Testing R2: 0.1351\n---\nRandom State: 18.0, Degree: 8.0\nTraining MSE: 25.4950, Testing MSE: 14.7015\nTraining R2: 0.1902, Testing R2: 0.3224\n---\nRandom State: 50.0, Degree: 2.0\nTraining MSE: 31.3811, Testing MSE: 14.7031\nTraining R2: 0.0412, Testing R2: -0.0992\n---\nRandom State: 28.0, Degree: 8.0\nTraining MSE: 26.0108, Testing MSE: 15.0432\nTraining R2: 0.1810, Testing R2: 0.2471\n---\nRandom State: 92.0, Degree: 5.0\nTraining MSE: 28.8316, Testing MSE: 15.0596\nTraining R2: 0.1288, Testing R2: 0.0452\n---\nRandom State: 50.0, Degree: 3.0\nTraining MSE: 31.3741, Testing MSE: 15.0996\nTraining R2: 0.0414, Testing R2: -0.1288\n---\nRandom State: 27.0, Degree: 6.0\nTraining MSE: 28.3818, Testing MSE: 15.1684\nTraining R2: 0.1459, Testing R2: -0.0383\n---\nRandom State: 54.0, Degree: 7.0\nTraining MSE: 26.3168, Testing MSE: 15.4452\nTraining R2: 0.2194, Testing R2: -0.1888\n---\nRandom State: 92.0, Degree: 3.0\nTraining MSE: 31.3186, Testing MSE: 15.4466\nTraining R2: 0.0536, Testing R2: 0.0206\n---\nRandom State: 18.0, Degree: 7.0\nTraining MSE: 25.7328, Testing MSE: 15.6885\nTraining R2: 0.1826, Testing R2: 0.2770\n---\nRandom State: 13.0, Degree: 6.0\nTraining MSE: 29.1391, Testing MSE: 15.7110\nTraining R2: 0.1456, Testing R2: -0.7455\n---\n","output_type":"stream"}]},{"cell_type":"code","source":"### Prediction of test data\n###1. prediction BV/TV output = intercept + coef_(HbA1c)\n###2. y_pred_test = 20.76923076923077 + -1.23094616 (X_test)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:12:50.743448Z","iopub.status.idle":"2024-07-22T02:12:50.743808Z","shell.execute_reply.started":"2024-07-22T02:12:50.743633Z","shell.execute_reply":"2024-07-22T02:12:50.743649Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"### Prediction for the test data\ny_pred=regression.predict(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:12:50.745156Z","iopub.status.idle":"2024-07-22T02:12:50.745498Z","shell.execute_reply.started":"2024-07-22T02:12:50.745331Z","shell.execute_reply":"2024-07-22T02:12:50.745345Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"### Performance metrics\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:12:50.746538Z","iopub.status.idle":"2024-07-22T02:12:50.746891Z","shell.execute_reply.started":"2024-07-22T02:12:50.746715Z","shell.execute_reply":"2024-07-22T02:12:50.746729Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"mse=mean_squared_error(y_test, y_pred)\nmae=mean_absolute_error(y_test,y_pred)\nrmse=np.sqrt(mse)\nprint(mse)\nprint(mae)\nprint(rmse)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:12:50.748600Z","iopub.status.idle":"2024-07-22T02:12:50.748963Z","shell.execute_reply.started":"2024-07-22T02:12:50.748786Z","shell.execute_reply":"2024-07-22T02:12:50.748802Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"###R square Formula\n# R^2 = 1- ssr /sst\n# R^2 = coefficient of determination SSR = sum of squares of residuals SST = total sum of squares","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:12:50.750184Z","iopub.status.idle":"2024-07-22T02:12:50.750558Z","shell.execute_reply.started":"2024-07-22T02:12:50.750383Z","shell.execute_reply":"2024-07-22T02:12:50.750397Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import r2_score","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:12:50.752093Z","iopub.status.idle":"2024-07-22T02:12:50.752444Z","shell.execute_reply.started":"2024-07-22T02:12:50.752274Z","shell.execute_reply":"2024-07-22T02:12:50.752289Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"score=r2_score(y_test,y_pred)\nprint(score)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:12:50.753417Z","iopub.status.idle":"2024-07-22T02:12:50.753772Z","shell.execute_reply.started":"2024-07-22T02:12:50.753599Z","shell.execute_reply":"2024-07-22T02:12:50.753614Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"### Adjusted R^2 = 1-[(1-R^2)*(n-1)/(n-k-1)]\n# where  R^2:The R^2 of model n: The number of observations  k: the number of predictor variables","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:12:50.755159Z","iopub.status.idle":"2024-07-22T02:12:50.755517Z","shell.execute_reply.started":"2024-07-22T02:12:50.755342Z","shell.execute_reply":"2024-07-22T02:12:50.755357Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"### Display adjusted R- squared\n1-(1-score)*(len(y_test)-1)/(len(y_test)-X_test.shape[1]-1)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:12:50.756697Z","iopub.status.idle":"2024-07-22T02:12:50.757047Z","shell.execute_reply.started":"2024-07-22T02:12:50.756876Z","shell.execute_reply":"2024-07-22T02:12:50.756891Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#from sklearn.linear_model import LinearRegression\n# Make predictions on new data\n#new_data = np.array([[7]]) # Replace with the actual value you want to predict on\n#predictions = regression.predict(new_data)\n#print(\"Predictions:\", predictions)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:12:50.758182Z","iopub.status.idle":"2024-07-22T02:12:50.758532Z","shell.execute_reply.started":"2024-07-22T02:12:50.758367Z","shell.execute_reply":"2024-07-22T02:12:50.758381Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"### Prediction new data\nregression.predict(scaler.transform([[6.8]]))","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:12:50.759510Z","iopub.status.idle":"2024-07-22T02:12:50.759860Z","shell.execute_reply.started":"2024-07-22T02:12:50.759685Z","shell.execute_reply":"2024-07-22T02:12:50.759701Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Hyperparameter Tuning","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import LinearRegression\n\ndf = pd.read_csv('/kaggle/input/bv-tv/BV_TV DATA - Sheet1.csv')\n\n### Independent and Dependent features\nX= df[['HbA1c']] ### Independent feaure should be data frame or 2D array.\ny=df['BV/TV'] ### This variable can be serier or 1D array\n\n### Train Test Split\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test= train_test_split(X,y,test_size=0.25,random_state=42)\n\nparameters= {\n        'fit_intercept': [True, False],\n    'copy_X': [True, False],\n    'n_jobs':[-1,1],\n    'positive': [True, False]\n}\n\n###LinearRegression \nmodel = LinearRegression()\ngrid_search = GridSearchCV(model, parameters, cv=5)  # 5-fold cross-validation\ngrid_search.fit(X, y)\nbest_params = grid_search.best_params_\nprint(\"Best hyperparameters:\", best_params)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-22T02:12:50.761203Z","iopub.status.idle":"2024-07-22T02:12:50.761551Z","shell.execute_reply.started":"2024-07-22T02:12:50.761385Z","shell.execute_reply":"2024-07-22T02:12:50.761400Z"},"trusted":true},"execution_count":null,"outputs":[]}]}